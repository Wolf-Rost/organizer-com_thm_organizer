#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrbook
\begin_preamble
% increases link area for cross-references and autoname them
\AtBeginDocument{\renewcommand{\ref}[1]{\mbox{\autoref{#1}}}}
\addto\extrasenglish{%
 \renewcommand*{\equationautorefname}[1]{}
 \renewcommand{\sectionautorefname}{sec.\negthinspace}
 \renewcommand{\subsectionautorefname}{sec.\negthinspace}
 \renewcommand{\subsubsectionautorefname}{sec.\negthinspace}
 \renewcommand{\figureautorefname}{Fig.\negthinspace}
 \renewcommand{\tableautorefname}{Tab.\negthinspace}
}

% in case somebody want to have the label "Equation"
%\renewcommand{\eqref}[1]{Equation~(\negthinspace\autoref{#1})}

% that links to image floats jumps to the beginning
% of the float and not to its caption
\usepackage[figure]{hypcap}

% the pages of the TOC is numbered roman
% and a pdf-bookmark for the TOC is added
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
  \frontmatter
  \pdfbookmark[1]{\contentsname}{}
  \myTOC
  \mainmatter }

% makes caption labels bold
\setkomafont{captionlabel}{\bfseries}
\setcapindent{1em}

% enables calculations
\usepackage{calc}

% fancy page header/footer settings
\renewcommand{\chaptermark}[1]{\markboth{#1}{#1}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}

% avoids that floats are placed above its sections
\let\mySection\section\renewcommand{\section}{\suppressfloats[t]\mySection}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage,fleqn
\use_default_options true
\master thesis.lyx
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Your title"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_amsmath 2
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\branch NoChildDocument
\selected 0
\filename_suffix 0
\color #ff0000
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Left Header
\begin_inset Argument
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chaptername
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thechapter
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rightmark
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Enable page headers and add the chapter to the header line.
\end_layout

\end_inset


\end_layout

\begin_layout Right Header
\begin_inset Argument
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
leftmark
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Left Footer
\begin_inset Argument
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Center Footer

\end_layout

\begin_layout Right Footer
\begin_inset Argument
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Technical Realization
\end_layout

\begin_layout Section
Untis XML Output
\end_layout

\begin_layout Standard
As a proprietary system, there was little direct technical implementation
 within the Untis system.
 However during the course of the work, contact was closely maintained with
 Mr.
 Gruber the managing director of Gruber and Petters.
 Whenever problems occurred within Untis or additional attributes needed
 to be added to the Untis XML export, Mr.
 Gruber had them implemented almost immediately so that indirectly the work
 at the THM did have an impact upon Untis.
 
\end_layout

\begin_layout Standard
The bulk of the technical implementation in Untis had to do with the modeling
 of real world structures with the resources available in Untis.
 For this purpose the structures previously used by MNI in the GP-Untis
 2008 version were adapted to those available within the Untis 2013 software.
 The data available from KMUB and BAU was then fitted to these structures.
\end_layout

\begin_layout Standard
Multiuser Untis 2013 opened up many new possibilities and many consequences
 as a result of, among other things, the modeling the departments as schools
 and the modeling of temporal behavior.
 The taxonomical and structural changes are described in this subsection.
\end_layout

\begin_layout Standard
As this chapter relates the more technical aspects of the work accompanying
 the thesis the structure and content of this section is, for the most part
 based upon the XML export which represents the data contained within Untis
 schedules to other systems, specifically to THM Organizer.
\end_layout

\begin_layout Subsection
Taxonomical and Structural Modeling
\end_layout

\begin_layout Standard
The terms and structures discussed here are representative of those of GP-Untis
 2008 and those of Untis 2013 from the daily version of November 12, 2012.
 Both exports have, by and large, the same main nodes general, time periods,
 descriptions, departments, rooms, subjects, teachers, classes (subject
 groups), students and lessons.
 Untis 2013 also has the node reductions which, like students in both versions,
 remains unused.
 The nodes reductions and students will not be discussed within this section
 due to their lack of use.
 In the following, the remaining nodes will be addressed with a short descriptio
n of their purpose, taxonomical and structural use and any changes that
 may have been made to them or their subordinate nodes and leaves.
\end_layout

\begin_layout Subsubsection
General
\end_layout

\begin_layout Standard
The general node in the XML structure models data specific to the schedule
 document itself.
 In both versions the school name is not editable and gives out the name
 of the creating program instead of the creating school resource available
 in Untis 2013.
\end_layout

\begin_layout Standard
The header information modeled in the 2008 version reflected the department
 information as discussed later in this section.
 This has been changed to model the school name information not given out
 by the appropriate element.
\end_layout

\begin_layout Standard
Both versions output the dates of the school year as input in the school
 data dialogue.
 In the 2008 version this information was used for the definition of the
 valid planning period.
 In the 2013 version planning periods within an actual school year can be
 specifically addressed making this information somewhat superfluous.
\end_layout

\begin_layout Standard
The output of a more specific planning period in the 2013 version allows
 the output of the name of the current planning period directly as entered
 as well as its start and end dates.
 The input of the planning period name is however not parced within Untis,
 solely displayed.
 This makes for a name output with a rather large amount of white space,
 which then needed to be trimmed on external parce.
\end_layout

\begin_layout Subsubsection
Time Periods
\end_layout

\begin_layout Standard
Time periods correspond to the lesson periods discussed in chapter two.
 They both remain tragically underused in both the 2008 and 2013 versions.
 They output the numerical weekday, period, a start and end time.
\end_layout

\begin_layout Standard
Within themselves these structures 
\end_layout

\begin_layout Standard
Although stamped with a reference id, they are nowhere referenced within
 the rest of the document.
 Lessons which logically have to be assigned to lesson periods have the
 exact same information in each child node of their times node.
 This creates a huge amount of redundancy and bloat within the export.
\end_layout

\begin_layout Subsubsection
Descriptions
\end_layout

\begin_layout Standard
Descriptions are currently used to model fields for teachers, subjects and
 subject pools, and types for rooms and lessons.
 Although Untis detects program internal references from resources of these
 types in the descriptions dialogue, it does not mark the descriptions as
 being referred to by resources of these types upon export.
 To avoid having to reprocess this resource while processing the resources
 which reference it the use of the statistics field, which corresponds to
 the flags element within the export, has been used to code the types of
 resources which reference these.
 This mitigates the lack of explicit association within the resource itself.
\end_layout

\begin_layout Standard
The previous structure was solely used to model room types this allowed
 one time parcing without use of the statistics field.
 Lesson types were coded within the lessons themselves, which prohibited
 their direct management.
 Teacher subject and subject pool fields had not been modeled in the 2008
 version.
\end_layout

\begin_layout Subsubsection
Departments
\end_layout

\begin_layout Standard
Currently departments are being used to model the differing CoSs offered
 by each department.
 In the previous version they had been used to model organizational hierarchies
 of resources.
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
<longname>FH, Giessen, MNI, Bioinform.</longname>
\end_layout

\begin_layout Standard
As we seen in the above example this had a four tier hierarchy of institution,
 campus, department, and subdepartment.
 This style of resource modeling had several reasons behind it.
\end_layout

\begin_layout Standard
Departments, like descriptions, can be referenced by multiple resource types.
 In regard to rooms this hierarchy made a organization of responsibility
 for the room evident.
 In data built from this information it allowed for the restriction to a
 particular responsible organization.
 In regards to teachers and subject pools this allowed the restriction to
 group affiliation or responsibility for individual CoSs.
\end_layout

\begin_layout Standard
Conversely lessons held by external organizations could be modeled in such
 a way that external teachers and subjects could be marked as such rather
 specifically.
 Before modeling departments as schools and the introduction of external
 resources, this allowed both a visible reservation of shared resources
 and vague output of department external lessons within rooms which are
 otherwise the responsibility of that department.
\end_layout

\begin_layout Subsubsection
Rooms
\end_layout

\begin_layout Standard
There have been several modeling changes to rooms, all of which exporting
 more room information than in the previous version.
 The structural changes to room modeling now account for more data required
 by facility management such as the number of seats and some of the room's
 equipment.
 These are now exported in the leaves capacity and flags respectively.
\end_layout

\begin_layout Standard
The biggest change however is the export of the resource's external name.
 This newly exported information is both a change in the modeling of the
 room itself and to the structure of the XML export.
 This information opens up many new possibilities in THM Organizer.
 Unfortunately this was first exported with the Untis daily version released
 November 12, 2012, it precluded any meaningful changes within the scope
 of this thesis.
\end_layout

\begin_layout Subsubsection
Subjects
\end_layout

\begin_layout Standard
Subjects have received no structural changes within the XML document, but
 the modeling has changed the way attribute information is exported.
 The subject's unique identifier, previously exported modeled in the subject
 field and exported in the corresponding subject group element, has been
 modeled in the text field and exported in the corresponding node.
 The subject's field is currently modeled and exported redundantly as a
 reference in the description element and the more accurate subject group
 element.
\end_layout

\begin_layout Subsubsection
Teachers
\end_layout

\begin_layout Standard
Teachers have undergone fairly extensive changes.
 In the newer version the first name can be exported in the forename node.
 This allowed the last name to be set to its actual value instead of a mix
 of first and last names as had previously been the case in the event of
 multiple teachers with the same last name.
\end_layout

\begin_layout Standard
Teachers no longer reference departments as previously done to associate
 them with fields and competence centers.
 This is now accomplished by use of a description reference, as before there
 is unfortunately no more accurate node such as the subject group of subjects
 to export this information.
 The use of descriptions however provides a manageable external reference
 for subjects, teachers and subject groups.
\end_layout

\begin_layout Standard
Additionally, as with rooms, the external name is now exported.
 This however has the same caveat that due to its rather late release this
 information was not yet able to be used in the implementation.
\end_layout

\begin_layout Subsubsection
Classes (Subject Groups)
\end_layout

\begin_layout Standard
The classes node is used in both versions to model subject groups.
 In both versions the long name is an extended human readable name with
 the name of the degree program and any criteria which further subset the
 CoS.
\end_layout

\begin_layout Standard
The attempt had been made to model the subsetting criteria as a part of
 the grade attribute and consequently the class level element in the export.
 However ass commented upon earlier in chapter 2 this field has a fixed
 number of characters which made it unusable in this regard.
 While this information has not been removed and is still exported, the
 only reliable subsetting information is structured within the long name
 itself as seen below.
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
Bioinformatik (BSc), 4.
 &amp; 5.
 Semester, Wahlpflicht
\end_layout

\begin_layout Standard
In this example we see the structure for the CoS biological information
 science with for the degree Bachelor of Science for electives in the 4th
 and 5th semesters.
 The criteria for subsetting is listed in the order of its hierarchy separated
 by a comma.
\end_layout

\begin_layout Standard
The competence center which designs the CoS and the general field of knowledge
 taught in this subject group is exported as a reference in the description.
 While the overall CoS is exported as a department reference.
\end_layout

\begin_layout Standard
The teacher was previously modeled within the 2008 version.
 This information was included in the understanding that this teacher was
 responsible for the development and planning of the COS.
 The teacher is in Untis cannot be associated with the any Untis user which
 makes it unusable in the security policy.
 This information was also not used for any functionality within THM Organizer,
 consequently it is no longer modeled.
\end_layout

\begin_layout Subsubsection
Lessons
\end_layout

\begin_layout Standard
Lessons have undergone quite extensive changes both structurally and taxonomical
ly.
\end_layout

\begin_layout Minisec
IDs and Coupling Rows
\end_layout

\begin_layout Standard
A lesson is first defined by the redundant resource identifier 
\begin_inset Quotes eld
\end_inset

LS_
\begin_inset Quotes erd
\end_inset

, the actual lesson number and two final digits.
 These two digits serve to represent the content of the coupling rows within
 the lesson dialogue.
 These coupling rows are exported with the same prefix and lesson number
 as the initial row but increment the last two digits.
 These rows serve to add additional room, teacher, and subject associations
 to the first row entered should the lesson be held in multiple rooms, by
 multiple teachers, or convey multiple lessons.
\end_layout

\begin_layout Standard
In the older version the exception to this handling was the resource subject
 group.
 In both versions this resource was added in the same row by adding additional
 subject group names separated from the previous by a comma.
 It's export in the XML was just as consequent, although a different separator
 is used.
 In the export this resource is output as the id attribute of the element
 lesson classes as shown below.
 While this is the abuse of what logically should be a single id, it does
 provide the logical product of the entered information.
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
<lesson_classes id="CL_BI.45.P CL_I.45.W CL_II.45.W CL_MI.45.W"/>
\end_layout

\begin_layout Standard
In Untis 2013 this functionality is also applied to subjects and rooms,
 that is to say these may both be entered in the lessons dialogue in the
 same manner as classes.
 The teacher resource unfortunately has not yet received this treatment
 as there were some value calculations dependent upon teachers being listed
 independently.
\begin_inset CommandInset citation
LatexCommand cite
key "Gruber2"

\end_inset

 However the exported schedule treats the new form of information entry
 the same as a coupling row during the output.
 This creates, in the best case scenario, a redundancy of almost 100% per
 coupling row, where all of the lesson's data is presented twice with only
 the value of one particular element attribute changed.
\end_layout

\begin_layout Subsubsection*
Temporal Behavior
\end_layout

\begin_layout Standard
Temporal behavior is based upon a number of differing attributes within
 each lesson.
 The first two leaves which give temporal information are the effective
 start and end dates.
 These dates give the boundaries for the lesson dependent upon dates inherited,
 in order of least to most precedence, from the school year, planning period,
 lesson group or explicitly set dates within the lesson dialogue.
\end_layout

\begin_layout Standard
The next element giving temporal information is the occurrences.
 This is a sequence of character values which are equal in number to the
 length in days of the document school year.
 Each character value has one of three values: 0 for does not occur, 1 for
 can occur, and F for holiday.
\end_layout

\begin_layout Standard
These three elements set up the mold into which the individual lesson instances
 can be formed.
\end_layout

\begin_layout Standard
Individual lesson instances provide additional data for association with
 individual lesson periods either according to a patterned match or with
 the explicit output of a specific date.
 This dichotomy stems from the weekly versus yearly hours provided in the
 lessons dialogue.
 
\end_layout

\begin_layout Standard
Whether or not a lesson exists with weekly or yearly hours it has the elements
 assigned day, assigned period, assigned start time, and assigned end time.
 These four items are in effect redundant information because these four
 elements must correspond to the four child elements of a specific time
 period element.
 However the corresponding time period is not referenced which makes this
 redundancy necessary in the context of its absence.
 Lessons which are associated with yearly lesson hours have the additional
 element assigned date which says explicitly upon what date this lesson
 instance take place.
\end_layout

\begin_layout Standard
In the earlier version, yearly lesson hours as well as intermittent planning
 were not yet supported.
 As such, this earlier version had solely the four shared temporal behavior
 elements within the lesson instance elements.
\end_layout

\begin_layout Minisec
Descriptions
\end_layout

\begin_layout Standard
Lastly, since the beginning of October 2012, Untis exports the lesson descriptio
n reference.
 This previously had been modeled against the text field as a simple character
 value.
\end_layout

\begin_layout Subsection
Recommended XML Structure
\end_layout

\begin_layout Standard
The current XML export structure has grown historically as we have seen
 from the comparison of the 2008 and 2013 exports.
 However there is much work that could still be done to eliminate a great
 deal of redundancy and bloat, make structures more easily read and parced,
 and conform to XML design consensus.
 While the recommended structures are explained below a direct comparison
 can be seen in Appendix B.1 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "Comparison of XML Structures"

\end_inset

.
 There, an excerpt of the actual schedule starting from two lessons and
 including all resource dependencies extending from them is presented, followed
 by the same information presented in the recommended structure.
\end_layout

\begin_layout Subsubsection*
Internal References
\end_layout

\begin_layout Standard
Internal references are for the most part made not only specific within
 the context of their usage, but within the context of the document itself.
 Document context as used here, means that the references used receive a
 prefix solely used within the export to identify its resource type.
 For example, although a teacher may be directly addressed as such in the
 context of its use, it is also artificially extended with the resource
 prefix 
\begin_inset Quotes eld
\end_inset

TR_
\begin_inset Quotes erd
\end_inset

.
 In MNI's schedule export these characters account for 8KB of unnecessary
 file size.
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
\size footnotesize
<lesson_subject id="SU_OOP"/>
\end_layout

\begin_layout Standard
The above example shows a typical reference in this case for the subject
 of a lesson, in this case, object-oriented programming.
 These references are based upon the resource's name value as discussed
 in chapter 2.
 These are stored within Untis at face value, only during the export they
 are affixed with this artificial resource prefix.
\end_layout

\begin_layout Standard
The name values they mask are often the colloquial names used to describe
 resources in everyday speech.
 This makes them desirable for display output which must be abbreviated.
 This necessitates the parcing of the reference values in order to retrieve
 this value from doubly specific reference values.
 While not particularly problematic this does make the processing of the
 hundreds of resources and references a rather inefficient process, and
 creates bloat in code handling both for the parcing and for the referencing
 as seen below.
 
\end_layout

\begin_layout Standard
Here the parcing of the subject as a child element of the subjects node:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
\size footnotesize
$subjectID = str_replace('SU_', '', $gpuntisID);
\end_layout

\begin_layout Standard
Here the parcing of the subject reference within the lessons node:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
\size footnotesize
$subjectID = str_replace('SU_', '', trim((string) $lessonnode->lesson_subject[0]
['id']));
\end_layout

\begin_layout Standard
During the latest changes to the XML structure itself, i.e.
 from the versions after September 2012, the Untis developers seem to have
 noticed this logical inconsistency and have started producing output without
 the double specificity.
 In the example below the lesson type is addressed directly without the
 prefix 
\begin_inset Quotes eld
\end_inset

DS_
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
\size footnotesize
<lesson_description>Ü</lesson_description>
\end_layout

\begin_layout Minisec
Dates and Times
\end_layout

\begin_layout Standard
Dates are modeled in Untis using an eight digit unsigned integer value.
 This occurs corresponds to the ISO 8601 notation YYMMDD, which is a four
 digit year followed by the numerical month and day with leading zeros.
\begin_inset CommandInset citation
LatexCommand cite
key "DateFormats"

\end_inset

 Unfortunately in order to ensure database compatibility, allow comparisons
 between and perform date algorithms with these values they must first be
 converted into the standard 'Y-m-d' format.
 This necessitates a similar parcing of the values as with internal references
 in order to be able to productively use these values.
\end_layout

\begin_layout Standard
Times are modeled using a four digit integer value.
 This could easily be fixed to allow for the colon, bringing it inline with
 every conventional time output in the world.
 If implemented in the Untis export structure without the following changes
 to the lesson instances this could account for a slight increase in the
 size of the export.
 The standardization of data would however more than make up for this small
 inconvenience.
\end_layout

\begin_layout Minisec
General
\end_layout

\begin_layout Standard
The school name should reflect the school choice in the corresponding Untis
 dialogue with the school year or planning period name reflecting the active
 planning period at the time of export.
 This would reduce the dates output in the general section solely to those
 necessary within the schedule while reducing user interaction to achieve
 a more targeted and expected goal.
\end_layout

\begin_layout Standard
This would not only ensure the correspondence of the exported data to the
 entries within the appropriate dialogues, but shrink overhead for the general
 element by three lines.
\end_layout

\begin_layout Minisec
Lesson Periods
\end_layout

\begin_layout Standard
The current structure creates an enormous redundancy and bloat within the
 periods.
 Because Untis periods are created using a grid functionality, they display
 not only the times entered for each of the individual periods, these are
 then multiplied by the number of days.
 The reference id of the period and the value of the period's period element
 could and should functionally have the same content and be referenced directly
 by the lesson instances.
\end_layout

\begin_layout Standard
What is missing are multiple grids.
 The assumption is that Untis would simply pack the lesson periods from
 multiple grids after the lesson periods from the previous.
 This would then compound the redundancy without bringing any extra value
 to the document, alone from the simple fact that the lesson periods are
 not referenced.
\end_layout

\begin_layout Standard
What would help bring clarity to the periods would be first the introduction
 of the grid resource.
 The parent element for all time values would then be grids followed by
 the element grid.
 This grid would receive a numerical id and have as child elements individual
 lesson period elements with an id unique within its grid a start time and
 end time.
\end_layout

\begin_layout Standard
This would add two lines of overhead for each grid but reduce overhead to
 from six lines of code to one for a single period and by a multiplicative
 factor corresponding to the number of days and periods in the current grid
 structure.
\begin_inset Formula $s=(p*d*6)-p-2$
\end_inset

 Where 
\begin_inset Formula $s$
\end_inset

 is the savings in lines of code, 
\begin_inset Formula $p$
\end_inset

 the number of lesson periods per day, 
\begin_inset Formula $d$
\end_inset

 the number of planned days per week, and 
\begin_inset Formula $2$
\end_inset

 the overhead for a single grid element.
 The overall benefit for multiple grids would be additive with 
\begin_inset Formula $s=g^{1}+g^{2}+...$
\end_inset

 where 
\begin_inset Formula $s$
\end_inset

 is the cumulative savings, 
\begin_inset Formula $g^{1}$
\end_inset

the savings from grid 1, 
\begin_inset Formula $g^{2}$
\end_inset

the savings from grid 2, and so on.
\end_layout

\begin_layout Minisec
Descriptions, Fields, Room Types and Lesson Types
\end_layout

\begin_layout Standard
The descriptions field could be replaced with resource specific managed
 attributes.
 Each of these would have an id unique to its type and a name.
 This name need not be the value of a subordinated name element as is currently
 the case.
 This can be the value of the field itself.
 The current statistic field and the corresponding flags element would no
 longer need to be used and could be removed from the export and from the
 corresponding Untis dialogues.
\end_layout

\begin_layout Standard
This would add two lines of overhead for each of the new resources, less
 the two that are already existent from descriptions.
 It would additionally reduce overhead per description from four lines to
 one.
 
\begin_inset Formula $s=(d*3)-4$
\end_inset

 Where 
\begin_inset Formula $s$
\end_inset

 is the savings in lines of code, 
\begin_inset Formula $d$
\end_inset

 the current number of descriptions, three the number of lines of code saved
 per current description and 
\begin_inset Formula $4$
\end_inset

 the number of additional lines from the overhead of the three new resources
 minus the two existing lines from descriptions.
\end_layout

\begin_layout Minisec
Room Equipment
\end_layout

\begin_layout Standard
Currently implemented as the statistics code of the rooms element, room
 equipment could become it's own element.
 This would require the implementation of equipment as a resource, but the
 association should be easily managed as it would be exactly on par with
 the functionality of the above mentioned resources.
\end_layout

\begin_layout Standard
This would create pure overhead in the sense that this resource is not yet
 managed.
 However it would allow the management in Untis of a valuable resource type,
 and in effect completely remove the need for Untis external modeling of
 rooms by FM.
 
\begin_inset Formula $o=e+2$
\end_inset

 where 
\begin_inset Formula $o$
\end_inset

 is the amount of overhead generated, 
\begin_inset Formula $e$
\end_inset

 the amount of equipment entries, and 
\begin_inset Formula $2$
\end_inset

 the overhead for the room equipment element.
\end_layout

\begin_layout Minisec
Rooms, Subjects and Teachers
\end_layout

\begin_layout Standard
Rooms, Subjects and Teachers could have not only their id as an attribute,
 but also their internal references and fixed attributes.
 The capacity for room resources could for example be implemented in this
 way.
 Their elements with multiple values such as room equipment and with special
 characters such as names and external names would could continue to be
 subordinate elements.
 Room's flags element could be replaced by an appropriate room equipment
 element referencing any noteworthy equipment to the room.
 This could have multiple empty space separated values similar to the current
 implementation of lesson subject groups.
\end_layout

\begin_layout Standard
This would result in a minimal savings in overhead for all resources of
 one to three lines, multiplicative for the number of entries of the respective
 resource type.
 It would however also standardize output by placing fixed model attributes
 without special characters appropriately as attributes rather than as elements,
 and allow attributes with a series of values or special characters to continue
 to be appropriately exported as elements.
\end_layout

\begin_layout Minisec
Subject Groups
\end_layout

\begin_layout Standard
Subject groups could have their ids and internal references modeled as attribute
s with their full names as their element values.
\end_layout

\begin_layout Standard
This would reduce overhead per subject group from six lines to one per subject
 group.
 
\begin_inset Formula $s=g*5$
\end_inset

 where 
\begin_inset Formula $s$
\end_inset

 is the savings in lines of code, 
\begin_inset Formula $g$
\end_inset

 the number of subject groups, and 
\begin_inset Formula $5$
\end_inset

 the amount of code saved per entry.
\end_layout

\begin_layout Minisec
Lessons
\end_layout

\begin_layout Standard
Lessons could have the fixed attributes id, period, and grid, as well as
 the internal reference for the lesson types implemented as attributes.
 With the associations to teachers, subjects and classes continuing their
 existence as elements.
 However additional teachers, subjects, and rooms could be added in the
 same line separated by an empty space as the current implementation does
 with subject groups.
 This would implement the semantic of multiple teachers teaching the same
 subject or subjects in one or more rooms for students fulfilling the requiremen
ts of the same subject groups in tandem and could be implemented in the
 lessons dialogue by the lack of a coupling row.
 The inclusion of a coupling row in the lesson dialogue as is yet the only
 method of input could then make clear the semantic difference intended
 if desired.
\end_layout

\begin_layout Standard
The effective dates and occurrences elements would also be removed, as explained
 in the next section.
\end_layout

\begin_layout Standard
This change would in the worst case scenario of a single teacher or subject
 have minimal advantages in reduced overhead similar to teacher, subject
 and room elements.
 However in the best case scenario of multiple teachers or subjects this
 would save overhead multiplicatively since it would remove the undesired
 output of single lessons as multiple lessons because of forced coupling
 rows.
 
\begin_inset Formula $s=(t*j*r*l*10)-5$
\end_inset

 Where 
\begin_inset Formula $s$
\end_inset

 is the savings in lines of code, 
\begin_inset Formula $t$
\end_inset

 the number of teachers, 
\begin_inset Formula $j$
\end_inset

 the number of subjects,
\begin_inset Formula $r$
\end_inset

 the number of rooms, 
\begin_inset Formula $l$
\end_inset

 the number of lessons, 
\begin_inset Formula $10$
\end_inset

 the number of lines of original code, and 
\begin_inset Formula $5$
\end_inset

 the number of lines of code after the recommendation.
\end_layout

\begin_layout Minisec
Lesson Instances
\end_layout

\begin_layout Standard
In the current implementation the export leaves the calculation of when
 lessons actually take place in the hands of the importing system.
 The implementing system must parce the occurrences element according to
 both the school year data and the effective begin date and effective end
 date elements, because the occurrences element has bears no association
 with the other two elements.
\end_layout

\begin_layout Standard
In the case of lessons planned using yearly hours, it also had to add the
 assigned date element to the lesson instances because it was otherwise
 impossible to calculate the occurrences of lessons under this implementation.
\end_layout

\begin_layout Standard
In order to ensure uniform instance handling and that all data necessary
 for the calculation of the lesson instance's occurrences is actually within
 the lesson itself, lesson instances could use an implementation similar
 to that of the lessons planned using yearly hours.
 Lesson instances would need to know during which method, yearly or weekly,
 they were created with, the period in which they take place, the date upon
 which they take place, and the rooms in which they take place.
 The first three values could be implemented as lesson instance attributes,
 with the room references being implemented as a series of references separated
 by an empty space, as is currently the case with subject groups.
\end_layout

\begin_layout Standard
This implementation would reduce the individual instances to one line of
 code from five.
 However this reduction in an individual instance code is balanced by the
 increased number of instances necessary to correctly model instances created
 using the weekly method.
 For example, if a lesson using only one teacher, room, and subject takes
 place twice a week for the entire length of a 16 week planning period this
 would result in 32 lines of code, one for each occurrence.
 The corresponding code in the current system would be 17 lines of code
 with 7 for each instance and three for the occurrences, effective start
 and end dates within the lesson element itself.
 In this example that would then be a 15 line increase in overhead.
 This is however somewhat unrealistic at the THM because over the course
 of a typical planning period many instances would not occur because of
 holidays and other organizational reasons.
\end_layout

\begin_layout Standard
However, in the case of lessons intended semantically to use more than one
 teacher, subject, or room using the weekly hours method, this system reduces
 overhead significantly.
 In the case of multiple teachers, subjects.
 or rooms this would amount to a savings of 7 lines per period plus 3 lines
 for the occurrences and effective dates elements per additional resource
 used.
\end_layout

\begin_layout Standard
In the case of lessons planned using the yearly method this would result
 directly in a reduction of overhead by reducing the lines of code from
 eight to one per instance and removing the three lines of code from the
 lesson element for the occurrences and effective dates which were superfluous
 using this method anyways.
 This is multiplied as with the weekly method in the event of additional
 teacher, subject or room resources which would have resulted in direct
 redundancy using the current method.
\end_layout

\begin_layout Standard
The most significant effect of this aspect of the recommendation is not
 the simplification, improved readability, or potential reduction in the
 lines of code, it is the ability to standardize how this information can
 be processed.
\end_layout

\begin_layout Section
A Untis Entity Relationship Proposal
\end_layout

\begin_layout Standard
It is difficult to describe the Untis database table structure in a professional
 manner.
 Untis had up until the introduction of the MultiUser module been designed
 to be used as a single user program on a local system.
 Data was persisted as a local file.
 Untis Multiuser uses the database for permanent persistence but operates
 locally with a file generated from this data.
 This makes Untis backwards compatible to a large extent and allows for
 newer program versions to add new functionality while using the same system
 interfaces they have developed over the years.
 Unfortunately in order to support this local file based program design,
 the database tables and values continue to represent lines of this locally
 processed file.
\end_layout

\begin_layout Standard
Most of the problems mentioned in dealing with Untis stem from its continued
 use of these local file based data model.
 In order to help Untis modify their system architecture with respect to
 the resources and processed involved an entity-relationship diagram (ERD
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "ERD"
description "Entity-Relationship Diagram"

\end_inset

) has been developed to account for resources and attributes directly involved
 in scheduling, but excluding to a greater extent those attributes used
 to generate the visual output, or calculate values.
\end_layout

\begin_layout Standard
Accompanying the ERD will be commentary as to which problems the design
 behind the diagram intends to solve and addresses possible resulting workflow
 simplifications.
 The ERDs presented depict resources with a simple box.
 Typically in ERDs ovals are used to model entity attributes, here these
 will be listed directly underneath the entity in order to conserve space.
 Instead of a diamond shape representing relations these are represented
 using boxes with a double border, this allows them to be modeled in the
 same way as entities with their principle attributes underneath them.
 Half circles on lines connecting entities indicate generalization and specializ
ation with the open end towards the more general resource and the curved
 end toward the more specialized.
 Where necessary dashed lines have been used to mark associations which
 had to be diagrammed as crossing the lines of other associations.
\end_layout

\begin_layout Subsection
The Abstract Lesson
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename erd abstract lesson.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The Abstract Lesson"

\end_inset

Abstract Lesson
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lessons exist both are paradox in that they exist as a resource that is
 the association of multiple other resources.
 Although lessons realize subjects, the fact that they can under circumstances
 realize more than one subject necessitates a table depicting the relation
 between itself and the subjects which it realizes.
 This precluded the correct symbolism of a semicircle over the line that
 would theoretically connect the lesson to the subject.
 Similarly a lesson can be taught by more than one teacher at a time, and
 may be used for more than one subject group.
 It could also be said that a lesson implements a particular lesson type.
 This necessitates no relational table because a given lesson can only implement
 one lesson type.
 The name for the lesson as a resource is typically derived from the subject
 name and the lesson type.
\end_layout

\begin_layout Standard
It may seem that the association of subjects and subject groups has been
 overlooked.
 While there is a logic to the direct association of the two resources,
 the association by means of lessons allows for slight variation in the
 content.
 This variation, while it doesn't change the subject content enough to warrant
 a new subject, might be geared more toward students that required to take
 courses in one subject group as opposed to another.
 As an example, we will say there is a math lesson.
 While students of biology and architecture may theoretically have to learn
 the same basic techniques the examples and calculations involved could
 be borrowed more from one discipline than the other.
\end_layout

\begin_layout Standard
Further fields of knowledge may have multiple subjects and subject groups
 which deal, for the most part, with integral partial disciplines.
 Teachers may be versed and certified in multiple fields.
 Thus necessitating the associative tables with each of these elements.
\end_layout

\begin_layout Standard
Figure 4.1
\begin_inset CommandInset ref
LatexCommand vpageref
reference "fig:The Abstract Lesson"

\end_inset

 depicts a possible model for an abstract lesson, i.e.
 a lesson which is not concretely associated with a time and place of occurrence.
\end_layout

\begin_layout Subsection
Temporal Behavior
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename erd temporal.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Temporal-Behavior"

\end_inset

Temporal Behavior
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The temporal behavior of lessons was slightly more difficult to model.
 It involves the aspects of cause and effect.
 As discussed in chapter 2 a lesson's temporal behavior describes when the
 lesson is to take place, where the actual assignment of lesson instances
 to particular lesson periods over the course of a planning period is the
 result of this behavior.
\end_layout

\begin_layout Standard
For this reason the diagram representing the entities involved in this process
 form a circle.
 The lesson itself is assigned a temporal behavior, this temporal behavior
 has the information necessary to describe how the lesson is to be planned
 over the course of a given planning period.
 This temporal behavior is the link between a lesson and the planning period
 for in which it takes place.
 If additional restrictions are necessary to the shape of the temporal behavior
 such as direct restrictions to specific ranges of days this information
 can be modeled using an entity designed for this purpose.
 This is easily combined with the current method of assignment according
 to the weekday only this behavior implied and implemented through the associati
on with actual lesson periods.
\end_layout

\begin_layout Standard
The planning period itself references grids through means of an associative
 table.
 This allows assignment of multiple grids to a single planning period, and
 allows these grids to be reused by multiple planning periods.
\end_layout

\begin_layout Standard
Each grid is composed of multiple periods.
 These are referenced through means of the associative table grid lesson
 periods.
 The periods here contain minimal redundant data in that one set of periods
 is used for every scheduled day of the grid's planning periods.
 This eliminates the redundant data used to store identical start and end
 times, days and period numbers for every individual day of the week.
\end_layout

\begin_layout Standard
Lastly, based upon the temporal behavior, lesson instances are assigned
 to specific lesson periods.
 This association is the end product of planning and while, as a result,
 the assignment is very specific.
 However is specificity is not sufficient to deduce the attributes of the
 planning period, temporal behavior, or grid used to plan it.
\end_layout

\begin_layout Standard
The proposed entity relationship is depicted in the diagram in figure 4.2
 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "fig:Temporal-Behavior"

\end_inset

.
\end_layout

\begin_layout Subsection
Rooms and Room Assignment
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename erd physical.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Rooms-and-Room"

\end_inset

Rooms and Room Assignment
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Rooms and their attributes were previously discussed in chapter 2.
 They require the certain additional attributes currently not directly available
 in Untis such as the building and floor in which they are situated, or
 are only rudimentary implemented such as room equipment which is currently
 modeled by means of the statistics entry.
\end_layout

\begin_layout Standard
These rooms are realization of certain archetypes such as an auditorium,
 workshop, or office.
 This can be modeled by their direct association with a specific room type.
 It was worth considering if the room type did not necessarily implicitly
 include specific equipment.
 This is by all means certainly the case as it would be hard to imagine
 an auditorium without seats or some sort of podium.
 However room types only leave general notions for more specific equipment
 such as overheads or video projectors.
\end_layout

\begin_layout Standard
It could also be that certain equipment which theoretically could be standard
 in a specific room type exist only in limited stock within the THM.
 Should for example a workshop for precision electronics may require a certain
 welding instrument for the subject to be taught.
 Should this equipment not be available within all rooms of this type it
 becomes necessary to take note of this specific equipment in the planning
 dialogue.
 Should this be necessary under the current system the schedule coordinator
 must know in advance which subjects require which special equipment and
 which rooms have this equipment.
 He must then create a room group corresponding to this equipment and assign
 the lesson to be planned within this room group.
\end_layout

\begin_layout Standard
The management of room equipment as resource within Untis and its persistence
 within the database would go a long ways to simplifying the planning process
 in regards to this criteria.
 This could then be implemented in the database by a table of equipment
 and a table associating the equipment to the specific rooms.
\end_layout

\begin_layout Standard
Rooms can also exist as an element of multiple room group sets.
 These sets are defined by the user to group rooms according to their usefulness
 for certain lesson types and numbers of students.
 This could also be implemented as a steady resource with its own table
 and a table associating the room groups with the constituent member rooms.
\end_layout

\begin_layout Standard
Lastly rooms are assigned to specific lesson instances based upon their
 availability, the lesson's temporal behavior, and the required type and
 equipment.
 The concrete room or rooms assigned to these lesson instances could have
 been modeled in one of two different ways.
\end_layout

\begin_layout Standard
First the lesson instance could be modeled consisting of a lesson id, lesson
 period id and date.
 This could either be a compound id of these three items or a separate id
 for each row of these items.
 This would require a second table associating these temporal instances
 with actual rooms.
\end_layout

\begin_layout Standard
The second way and the one depicted in the recommendation is that these
 three items and the room id be entries in the same table.
 While, in the case of lessons which take place in more than one room, this
 would generate some redundancy due to the nature of the association the
 redundancy would not have been completely removed with the addition of
 a further associative table which would have had to be indexed according
 to the lesson id, lesson period id, and date anyways.
\end_layout

\begin_layout Standard
The recommended entity relation for this resource model is depicted in figure
 4.3 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "fig:Rooms-and-Room"

\end_inset

.
\end_layout

\begin_layout Subsection
Departments and Planning Priorities
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename erd departmental restrictions.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Room-Department-Association"

\end_inset

Room Department Association and Planning Priorities
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Departments are through their extension in the person of their planning
 coordinators and directly as a resource an extremely important part of
 the planning process.
 They give definition to what is planned by whom and what resources are
 available in specific planning processes.
\end_layout

\begin_layout Standard
In order to accomplish this departments must be able to be associated with
 the resources.
 Because resource association can vary between planning periods, the validity
 of the association is enforced by bringing the planning period into the
 association.
\end_layout

\begin_layout Standard
Because departments rely on individual lesson period planning priorities
 for resources the association of resource department and planning period
 is given its own id.
 This id can then be used to associate this association with a specific
 lesson period on multiple dates and a value relating the specific planning
 priority for the period.
 Similar to the temporal behavior this is set according to a default weekly
 pattern, however the association with specific dates allows targeted restrictio
n of resources and allows this targeted restriction to be planned around
 using yearly hours.
\end_layout

\begin_layout Standard
For example should a teacher be typically available every Thursday, but
 knows in advance that he has other obligations on a specific Thursday at
 some point within the planning period, this need not be modeled by creating
 a temporal behavior specific to this one lesson.
 This could be modeled by a restriction for that particular day, allowing
 the Untis planning algorithm to assign yearly hours instead of weekly for
 the absence.
\end_layout

\begin_layout Standard
The association of these lesson periods to planning periods over grids is
 exactly the same as previously mentioned in the section discussing the
 modeling of temporal data.
\end_layout

\begin_layout Standard
An ERD relating the specifics of this model for the room resource can be
 seen in figure 4.4 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "fig:Room-Department-Association"

\end_inset

.
\end_layout

\begin_layout Subsection
ERD Summary
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename erd.png
	scale 30

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Complete-Untis-ERD"

\end_inset

Complete Untis ERD
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The proposed restructuring of the database would not only bring about the
 many advantages of the new implementation methods discussed, it would also
 make the management of the database itself much easier for the Untis developers.
 MS SQL and MySQL (using the InnoDB engine) support foreign keys and cascading
 of data.
 They allow transaction based queries to enable consistency checks and table
 restoration.
\end_layout

\begin_layout Standard
This would remove much of the program code responsible for data aggregation
 and propagation as this would then be automatically carried out by the
 algorithms of the database management system itself.
 The deletion of a planning period for example could cascade far enough
 to delete all of the associations with grids, remove subordinate temporal
 behavior, departmental allotments, and departmental planning priorities.
\end_layout

\begin_layout Standard
It would ensure that the data provided locally reflects the actual data
 stored within the database in concurrency situations.
\end_layout

\begin_layout Standard
Figure 4.5 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "fig:Complete-Untis-ERD"

\end_inset

 displays the recommendation as described in the previous sections in its
 completeness.
\end_layout

\begin_layout Section
THM Organizer
\end_layout

\begin_layout Standard
The existing workflow of the THM Organizer Component in regards to schedules
 started with the export of a schedule from the Untis system.
 The initial hope with the acquisition of Untis 2013 for the THM was that
 direct management of existing resources would be made possible.
 This would have eliminated data inconsistency not only between Untis and
 external systems, but also enabled external data propagation and management
 within the Untis system.
 As a practical example it would have enabled teacher first names and personnel
 numbers to be directly propagated through the Untis database tables so
 that all scheduling coordinators were on the same stand.
\end_layout

\begin_layout Standard
Sadly the tables used by the Untis system are still in a state of transition
 and the Untis representatives strongly recommended that this approach be
 avoided, not only for data creation and manipulation, but also for read
 access.
 Instead recommending that we rely on the data exported through the XML
 export.
\begin_inset CommandInset citation
LatexCommand cite
key "Gruber2"

\end_inset

 Although less than optimal and a great disappointment after the initial
 high hopes for clean data, it was conceded that this would continue to
 be the start point for the schedule workflows within the THM Organizer
 component for the foreseeable future.
\end_layout

\begin_layout Standard
The redesign and refactoring of THM Organizer to use the new XML export
 structures and data formed the greater part of the accompanying technical
 implementation.
\end_layout

\begin_layout Subsection
Reactive Control Mechanisms
\end_layout

\begin_layout Standard
As discussed in section about reactive restriction within Joomla! 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "JoomlaReactiveRestriction"

\end_inset

, THM Organizer relies heavily upon reactive restriction to enforce its
 security policy.
\end_layout

\begin_layout Standard
Within views reactive restriction can take place in two possible ways.
 User access can be checked upon view access.
 This is optimal to protect the display of sensitive information, and eliminate
 extensive business logic before it is even performed.
 Should the user not be allowed to perform a certain action or actions the
 code being processed can simply be stopped.
\end_layout

\begin_layout Standard
User access can also be restricted in views while constructing the toolbar.
 This method allows fine tuned user access methods to the resource involved,
 but also allows the display of information itself as a potential access
 method, similar to the Joomla! view access levels construct.
 This would allow for example a user who is allowed to create but not edit
 items access to the new button, but stop the performance of the code which
 would have rendered the edit button.
\end_layout

\begin_layout Standard
Of these two THM Organizer uses the first method because of the complex
 nature of the information to be displayed, and the current lack of a refined
 security policy defining the access rights of multiple users.
\end_layout

\begin_layout Standard
Within controllers reactive restriction is checked upon function access,
 checking the access in much the same way as the toolbar building in the
 component views.
 This prevents unauthorized user interaction by means of URL manipulation
 or the developer tools available for most common browsers.
\end_layout

\begin_layout Subsection
XML Modeling with the SimpleXML Library
\end_layout

\begin_layout Standard
The import of schedules into THM Organizer occurs using the XML export prepared
 by Untis.
 XML is not natively readable within PHP.
 Multiple libraries exist for this purpose the one chosen for use within
 the scope of this thesis was the SimpleXML library.
 First the XML document must be converted into a SimpleXMLElement using
 the code below.
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
$xmlSchedule = simplexml_load_file($_FILES['file']['tmp_name']);
\end_layout

\begin_layout Standard
Once created the objects can be addressed in several different ways correspondin
g to PHP standard methods for other objects.
 As the method above delivers a SimpleXMLElement object.
 This corresponds to a tag in the XML syntax, in the case of the example
 above the document tag.
\end_layout

\begin_layout Standard
Many tags will have important attributes written within the tag itself.
 The access to attributes requires both the element being processed and
 the attribute names to be handled in a similar manner to array indexes
 in PHP.
 The element itself must be addressed with the zero index, with the appropriate
 attribute name as the second index as seen below.
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
$creationDate = trim((string) $xmlSchedule[0]['date']);
\end_layout

\begin_layout Standard
The information must first be converted to one of the PHP value types in
 order to be saved as a variable.
 Here the trim() function is used to remove any additional white space stored
 within the value.
\end_layout

\begin_layout Standard
Nodes themselves can be accessed in a similar manner to object properties
 in standard PHP by means of the object operator 
\family typewriter
->
\family default
.
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
$departmentname = trim((string) $xmlSchedule->general->header1);
\end_layout

\begin_layout Standard
In this example above the general tag, a tag subordinate to the document
 tag is first accessed.
 This would deliver a further SimpleXMLElement.
 Going further the 
\family typewriter
header1
\family default
 tag subordinate to the general tag is accessed.
 Since this element has no children the object operator makes reference
 to the value of the element and not the element itself.
 Here the name of the department which produced the schedule is retrieved.
 As in the previous example this is first converted to a string and stripped
 of white space.
\end_layout

\begin_layout Standard
The last major function necessary for this implementation is the iterator.
 Several times an element will have multiple subordinate elements with the
 same tag name, such as teacher, room, or time.
 In order to process such subordinate elements the iterative function of
 the SimpleXML library must be used.
 This works much the same as the standard PHP iterator.
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
foreach ($xmlSchedule->subjects->children() as $subjectnode)
\end_layout

\begin_layout Standard
This example displays the manner in which the individual subjects are addressed
 for processing.
 First the subordinate subjects element is accessed.
 All the subordinate elements of the subjects element are individual subjects.
 As no differentiation can be made amongst the children while all have the
 same name they must be iterated over for further processing.
\end_layout

\begin_layout Standard
These methods were then the building blocks for the creation of structures
 necessary building blocks for the building of structures which made the
 rest of the workflows possible.
\end_layout

\begin_layout Subsection
Version Management and Persistence
\begin_inset CommandInset label
LatexCommand label
name "Version Management and Persistence"

\end_inset


\end_layout

\begin_layout Standard
In previous versions of THM Organizer the contents of the XML files were
 made persistent as individual table entries.
 The schedule data and resources were stored in their own respective tables
 building an entity relation model similar but much simpler than the one
 recommended in section 4.2.
\end_layout

\begin_layout Standard
The first idea for the persistence of schedule data before the recommendation
 to rely solely on the XML export was that there be almost no persistent
 data.
 Data should be retrieved dynamically from the central database.
 As this was recommended against the idea was to use the data contained
 within the XML to fill the then current entity relationship model.
 This too was ruled out because of the implementation of the three dimensional
 schedule model and the implementation of yearly hours, both of which were
 impossible under the previous model.
\end_layout

\begin_layout Standard
This left two options the restructuring of the current THM Organizer model
 to fit the new schedule information, or the creation of a completely new
 structure.
 In the end the second option was chosen.
 This allowed for the restructuring of the entire component making it much
 lighter.
 The idea was that only the schedules needed to be directly managed and
 that these would be made persistent in the form of strings holding JSON
 data.
\end_layout

\begin_layout Standard
This implementation allows for a completely dynamic structuring of the resources
 imported from Untis.
 The structure is, however, loosely based upon the structure of the imported
 XML.
 This structure could then be saved to the database in place of the previous
 persistence of the actual XML documents.
 From the previous tables then only the schedules, teachers, teacher fields,
 rooms and room types needed to be made available in the database.
 Schedules for the presentation of the results of scholastic scheduling,
 and the others so that they could be used within the appointment and event
 management functionality of the component.
\end_layout

\begin_layout Standard
The uploaded schedules then form defacto a very rudimentary form of version
 management.
 The organization, the planning period, and the date of export allowing
 insight into the development of the schedule over time.
 The dynamic structure of the JSON strings allows the changes between various
 local copies of the schedule to be calculated and stored as a part of the
 schedule itself.
\end_layout

\begin_layout Standard
The persistence of the schedules as JSON string also had other advantages.
 Their content can be directly decoded into PHP, the language in which Joomla!
 code is written.
 This allows their direct translation into the structures required for further
 use within the system.
\end_layout

\begin_layout Standard
Also the JSON format was native to the scheduling output view implemented
 as a rich internet application within Organizer.
 This program is largely JavaScript based and allowed the structures created
 to be put directly into use.
 This allowed an ease of transition from the old system to the new system
 within a matter of days.
\end_layout

\begin_layout Subsection
Validation and Delta Calculation
\begin_inset CommandInset label
LatexCommand label
name "Validation"

\end_inset


\end_layout

\begin_layout Standard
The implementation for the validation of the imported XML and the calculation
 of the delta between the schedule being imported and the schedule currently
 marked as active for the given semester rely on the same structures.
 The two processes feeding seamlessly into one another.
\end_layout

\begin_layout Standard
Using the SimpleXML tools discussed in section 4.3.3, THM Organizer tries
 to create PHP objects to model the data retrieved from the XML structure.
 It follows the structure of the XML document for the most part, first creating
 the data needed to be referenced in later sections and then later checking
 the references to ensure that the data referenced exists.
\end_layout

\begin_layout Standard
The biggest difference between the structure of the XML document and that
 of the PHP structure modeling it is the calendar property.
 As previously mentioned in multiple places in the thesis, lesson occurrences
 are not directly written into the XML document in its current format.
 Instead these occurrences must be calculated by iterating over the course
 of the effective data elements expressed as a substring of the massive
 occurrences element.
 This process is extremely cumbersome and entirely unnecessary.
 To avoid having to perform this calculation every time the actual date
 of a lesson is asked this information is calculated once at the time of
 validation.
\end_layout

\begin_layout Standard
Each resource is checked to ensure that the information has been entered
 according to the guidelines expressed in chapter 2.
 At each stage of the process a decision has to be made if an inconsistency
 is a cause for the validation to be terminated, or this is information
 which the user uploading the schedule should later bring in line with the
 internal standard.
\end_layout

\begin_layout Standard
This firstly ensures that all the time information is syntactically and
 semantically valid according to the information entered.
 Secondly it creates a structure with extremely low redundancy which is
 easily read.
 Each date of the term is created as an index in a calendar element, with
 the periods occurring on that day acting as indexes for that particular
 date.
 Further the lessons scheduled to occur within each period are applied as
 indexes with the scheduled rooms further used as indexes within the lesson.
 The use of indexes instead of values allowed for a later ease of marking
 during the development of the delta.
\end_layout

\begin_layout Standard
The calculation of the delta compares partial structures in one plan and
 another.
 This occurs in several places at different levels in the structural hierarchy.
\end_layout

\begin_layout Standard
First the lessons are compared directly according to the keys assigned to
 them by Untis.
 Should a lesson key exist in one plan or the other the lesson is marked
 as new or added to the schedule and marked as removed according to the
 perspective of which schedule is to later be marked active.
\end_layout

\begin_layout Standard
Then the abstract lesson's resources are examined subjects, teachers, and
 subject groups.
 Should these deviate from one schedule to another the resource itself is
 marked as new or removed and the lesson itself is marked as changed.
\end_layout

\begin_layout Standard
Lastly the concrete lesson's occurrences and room assignments are checked.
 This occurs within the previously discussed calendar element of the created
 structure.
 Every date and period are checked for lesson assignment.
 Should a lesson occur in one schedule and not the other this occurrence
 is marked as new or added to the schedule and marked as removed.
 Lastly the lesson occurrence’s rooms are inspected should the assigned
 rooms vary the variance for each room is marked as new or removed, and
 the lesson occurrence is marked as changed.
\end_layout

\begin_layout Standard
For a look at the complete structure of the THM Organizer schedules see
 appendix B.2 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sec:THM-Organizer-Schedule"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Branch NoChildDocument
status collapsed

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "thesisExample"
options "alpha"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature
set_width "custom"
width "2.5cm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
