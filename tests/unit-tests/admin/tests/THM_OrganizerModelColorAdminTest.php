<?php
/**
 * @package    THM_Organizer.UnitTest
 * @author     Meik-Kevin MÃ¼nch <Meik-Kevin.Muench@mni.thm.de>
 * @copyright  Copyright (C) 2005 - 2014 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */

// Include the SUT class
require_once JPATH_ADMINISTRATOR . '/components/com_thm_organizer/models/color.php';

/**
 * Class THM_OrganizerModelColorTest
 *
 * @package             com_thm_organizer
 * @coversDefaultClass  THM_OrganizerModelColor
 *
 * @requires            extension sqlite3
 */
class THM_OrganizerModelColorTest extends TestCaseDatabase
{
    /**
     * @var THM_OrganizerModelColorTest
     * @access protected
     */
    protected $object;
    
    /**
     * @var array
     * @access protected
     */
    protected $data;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     * 
     * @return  null
     */
    protected function setUp()
    {
        parent::setup();

        $this->saveFactoryState();

        JFactory::$application = $this->getMockCmsApp();

        $config = array();

        // View name
        $config['name'] = "color_save";

        // Set a base path for use by the controller
        //$config['base_path'] = "";

        // If the default task is set, register it as such
        // $config['default_task'] = "";

        // Set the default model search path
        //$config['model_path'] = "";

        // Set the default view search path
        $config['view_path'] = "";

        // Set the default view.
        $config['default_view'] = "";
        
        $connect = parent::getConnection();
        $this->_db = JFactory::getDbo();
        
      	$this->object = new THM_OrganizerModelColor($config);
      
      	JTable::addIncludePath(JPATH_COMPONENT . '/tables');
      	
    }
    
 	/**
     * Gets the data set to be loaded into the database during setup
     *
     * @return xml dataset
     */
    protected function getDataSet() {
        $dataSet = new PHPUnit_Extensions_Database_DataSet_CsvDataSet(',', "'", '\\');

        $dataSet->addTable('jos_thm_organizer_colors', JPATH_TEST_DATABASE . '/jos_thm_organizer_colors.csv');
        
        return $dataSet;
    }
    
    /**
     * Gets Rows from a Table in the database
     *
     * @param   string  $table    The name of the table
	 * @param   string  $columns  Names of the columns (seperated with ',')
	 *
     * @return array
     */
    protected function getTableRows($table, $columns) {
    	$query = $this->_db->getQuery(true);
    	$query->select($columns);
    	$query->from($table);
    	$this->_db->setQuery($query);
    	$this->_db->query();
    	$array = $this->_db->loadRowList();
    	return $array;
    }
    
    /**
     * Insert a Table in the database
     *
     * @param   string  $table    The name of the table
     * @param   string  $columns  Names of the columns (seperated with ',')
     * @param   array	$values  Array elements = number of columens
     * 
     */
    protected function InsertinTable($table, $columns, $values) {
    	$query = $this->_db->getQuery(true);
    	
    	for($i = 0; $i<count($values); $i++){
    		$value[] = $this->_db->quote($values[$i]);
    	}
    	$query->insert($table)->columns($columns)->values(implode(',', $value));
    	$this->_db->setQuery($query);
    	$this->_db->query();
    }

    /**
     * Overrides the parent tearDown method.
     *
     * @return  void
     *
     * @see     PHPUnit_Framework_TestCase::tearDown()
     * @since   3.2
     */
    protected function tearDown()
    {
        $this->restoreFactoryState();

        $this->object = null;

        parent::tearDown(); // TODO: Change the autogenerated stub
    }
    
   
    
    /**
     * Method to test the save function (empty db)
     *
     * @covers ::save
     */
    public function testsave()
    {
    	$expected1 = true;
    	$expected2 = array();
    	$this->data['name'] = 'test';
    	$this->data['color'] = '#100';
    	$this->data['id'] = '0';
    	JRequest::setVar('jform', $this->data, 'get');
    	
    	$expected2[] = array($this->data['id'],$this->data['name'], $this->data['color']);
    	
    	$actual1 = $this->object->save();
    	$this->assertEquals($expected1, $actual1);
    	
    	$actual2 = $this->getTableRows('jos_thm_organizer_colors', 'id, name, color');
    	
    	$this->assertEquals($expected2, $actual2);
    }
    
    /**
     * Method to test the save function (db with 1 entry)
     *
     * @covers ::save
     */
    public function testsave2()
    {
    	$expected1 = true;
    	
    	$prevalues= array('test1','100');
    	$expected2 = array();
    	$expected2[] = $prevalues;
    	$this->InsertinTable('jos_thm_organizer_colors', 'name, color', $prevalues);
    	
    	$this->data['name'] = 'test';
    	$this->data['color'] = '#100';
    	JRequest::setVar('jform', $this->data, 'get');
    	$expected2[] = array($this->data['name'], $this->data['color']);
    	 
    	$actual1 = $this->object->save();
    	$this->assertEquals($expected1, $actual1);
    	 
    	$actual2 = $this->getTableRows('jos_thm_organizer_colors', 'name, color');
    	
    	$this->assertEquals($expected2, $actual2);
    }
    
    /**
     * Method to test the save function (db with 2 entries)
     *
     * @covers ::save
     */
    public function testsave3()
    {
    	$expected1 = true;
    	 
    	$prevalues= array('test1','#ffffff');
    	$expected2 = array();
    	$expected2[] = $prevalues;
    	$this->InsertinTable('jos_thm_organizer_colors', 'name, color', $prevalues);
    	 
    	$prevalues= array('test2','#eeeeee');
    	$expected2[] = $prevalues;
    	$this->InsertinTable('jos_thm_organizer_colors', 'name, color', $prevalues);
    	
    	$this->data['name'] = 'test';
    	$this->data['color'] = '#001';
    	JRequest::setVar('jform', $this->data, 'get');
    	$expected2[] = array($this->data['name'], $this->data['color']);
    
    	$actual1 = $this->object->save();
    	$this->assertEquals($expected1, $actual1);
    
    	$actual2 = $this->getTableRows('jos_thm_organizer_colors', 'name, color');
    	 
    	$this->assertEquals($expected2, $actual2);
    }
    
    /**
     * Method to test the delete function (2 ids)
     *
     * @covers ::delete
     */
 public function testdelete()
    {
    	$_SERVER['REQUEST_METHOD'] = 'GET';
    	$array = $this->getTableRows('jos_thm_organizer_colors', 'id, name, color');
    	 
    	$expected = $array;
    	
    	$expected1 = true;
    	
    	$prevalues= array('0','test','100');
    	$this->InsertinTable('jos_thm_organizer_colors', 'id, name, color', $prevalues);
    	
    	$prevalues= array('1','test','100');
    	$this->InsertinTable('jos_thm_organizer_colors', 'id, name, color', $prevalues);
    	 
    	
    	$test = array('0','1');
    	JRequest::setVar('cid',$test,'post');
 
    	$this->object->delete();
    	
    	$actual =  $this->getTableRows('jos_thm_organizer_colors', 'id, name, color');
		
    	$this->assertEquals($expected, $actual);
    }
    
    /**
     * Method to test the delete function (1 id)
     *
     * @covers ::delete
     */
    public function testdelete2()
    {
    	$_SERVER['REQUEST_METHOD'] = 'GET';
    	$array = $this->getTableRows('jos_thm_organizer_colors', 'id, name, color');
    
    	$expected1 = true;
    	 
    	$prevalues= array('0','test','100');
    	$this->InsertinTable('jos_thm_organizer_colors', 'id, name, color', $prevalues);
    	 
    	$prevalues= array('1','test','100');
    	$expected = array();
    	$expected[] = $prevalues;
    	$this->InsertinTable('jos_thm_organizer_colors', 'id, name, color', $prevalues);
    
    	$test = array('0');
    	JRequest::setVar('cid',$test,'post');
    
    	$this->object->delete();
    	 
    	$actual =  $this->getTableRows('jos_thm_organizer_colors', 'id, name, color');
    	
    	$this->assertEquals($expected, $actual);
    }
    
    /**
     * Method to test the delete function (id, which doesnt exists)
     *
     * @covers ::delete
     */
    public function testdelete3()
    {
    	$_SERVER['REQUEST_METHOD'] = 'GET';
    	$array = $this->getTableRows('jos_thm_organizer_colors', 'id, name, color');
    
    	$expected1 = true;
    
    	$prevalues= array('0','test','100');
    	$expected = array();
    	$expected[] = $prevalues;
    	$this->InsertinTable('jos_thm_organizer_colors', 'id, name, color', $prevalues);
    
    	$prevalues= array('1','test','100');
    	$expected[] = $prevalues;
    	$this->InsertinTable('jos_thm_organizer_colors', 'id, name, color', $prevalues);
    
    	$test = array('10');
    	JRequest::setVar('cid',$test,'post');
    
    	$this->object->delete();
    
    	$actual =  $this->getTableRows('jos_thm_organizer_colors', 'id, name, color');
    	 
    	$this->assertEquals($expected, $actual);
    }
    
}