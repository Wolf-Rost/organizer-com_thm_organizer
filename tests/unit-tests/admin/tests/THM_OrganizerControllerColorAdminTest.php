<?php
/**
 * @package    THM_Organizer.UnitTest
 * @author     Meik-Kevin MÃ¼nch <Meik-Kevin.Muench@mni.thm.de>
 * @copyright  Copyright (C) 2005 - 2014 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */

// Include the SUT class
require_once JPATH_ADMINISTRATOR . '/components/com_thm_organizer/controllers/color.php';

/**
 * Class THM_OrganizerControllerColorAdminTest
 *
 * @package             com_thm_organizer
 * @coversDefaultClass  THM_OrganizerControllerColor
 *
 * @requires            extension sqlite3
 */
class THM_OrganizerControllerColorAdminTest extends TestCaseDatabase
{
    /**
     * Minimun Joomla version to run this test,
     * if the Joomla version is below this version the test will be skipped.
     */
    const MIN_JOOMLA_VERSION_FOR_TESTS = "3.4";

    /**
     * @var THM_OrganizerControllerColor
     * @access protected
     */
    protected $object;
    
    /**
     * @var array
     * @access protected
     */
    protected $data;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     * 
     * @return  null
     */
    protected function setUp()
    {
        parent::setup();

        $this->saveFactoryState();

        JFactory::$application = $this->getMockCmsApp();

        $config = array();
        
        $connect = parent::getConnection();
        $this->_db = JFactory::getDbo();
        
      	$this->object = new THM_OrganizerControllerColor($config);
      	JTable::addIncludePath(JPATH_COMPONENT . '/tables');
      	
    }
    
 	/**
     * Gets the data set to be loaded into the database during setup
     *
     * @return xml dataset
     */
    protected function getDataSet() {
        $dataSet = new PHPUnit_Extensions_Database_DataSet_CsvDataSet(',', "'", '\\');

        $dataSet->addTable('jos_thm_organizer_colors', JPATH_TEST_DATABASE . '/jos_thm_organizer_colors.csv');
        
        return $dataSet;
    }
    
    /**
     * Gets Rows from a Table in the database
     *
     * @param   string  $table    The name of the table
	 * @param   string  $columns  Names of the columns (seperated with ',')
	 *
     * @return array
     */
    protected function getTableRows($table,$columns) {
    	$query = $this->_db->getQuery(true);
    	$query->select($columns);
    	$query->from($table);
    	$this->_db->setQuery($query);
    	$this->_db->query();
    	$array = $this->_db->loadRowList();
    	return $array;
    }

    /**
     * Overrides the parent tearDown method.
     *
     * @return  void
     *
     * @see     PHPUnit_Framework_TestCase::tearDown()
     * @since   3.2
     */
    protected function tearDown()
    {
        $this->restoreFactoryState();

        $this->object = null;

        parent::tearDown(); // TODO: Change the autogenerated stub
    }
    
    /**
     * Method to test the edit function
     *
     * @covers ::add
     */
    public function testedit()
    {
        $expected = "index.php?option=com_thm_organizer&view=color_edit";

        $actual = $this->object->edit();

        $reflector = new ReflectionProperty(get_class($this->object), 'redirect');
        $reflector->setAccessible(true);
        $actual = $reflector->getValue($this->object);

        $this->assertEquals($expected, $actual);
    }
    
    /**
     * Method to test the edit function
     *
     * @covers ::edit
     */
    public function testedit2()
    {
        $this->markTestSkipped(
            'Waiting for decision redirect or parent::display in controller.'
        );
    	$expected = JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));
    	 
    	// Mock the JSession object and mark the get-method to be manipulated
    	$sessionMock = $this->getMock("JSession", array("get"));
    
    	$userMock = $this->getMock("JUser", array("authorise"));
    
    	$reflector = new ReflectionProperty('JUser', '_authLevels');
    	$reflector->setAccessible(true);
    	$reflector->setValue($userMock, array(1,2,3,4,5,6,7,8,9,10));
    
    	// Let calls to the get-method with paramter 'user' return our JUser object.
    	$sessionMock->expects($this->exactly(1))
    	->method('get')
    	->with('user')
    	->will($this->returnValue($userMock));
    
    	// Set our JSession mock object in the JFactory
    	JFactory::$session = $sessionMock;
    
    	$actual = $this->object->edit();
    
    	$reflector = new ReflectionProperty(get_class($this->object), 'redirect');
    	$reflector->setAccessible(true);

    	$this->assertEquals($expected, $actual);
    }
    
    /**
     * Method to test the add function
     *
     * @covers ::add
     */
    public function testadd()
    {
    	$expected =  "index.php?option=com_thm_organizer&view=color_edit";

        $_SERVER['REQUEST_METHOD'] = 'GET';
        $this->object->add();

        $reflector = new ReflectionProperty(get_class($this->object), 'redirect');
        $reflector->setAccessible(true);
        $actual = $reflector->getValue($this->object);

        $this->assertEquals($expected, $actual);
    }
    
    /**
     * Method to test the add function
     *
     * @covers ::add
     */
    public function testadd2()
    {
        $this->markTestSkipped(
            'Waiting for decision redirect or parent::display in controller.'
        );
    	$expected = JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));
    	
    	// Mock the JSession object and mark the get-method to be manipulated
    	$sessionMock = $this->getMock("JSession", array("get"));
    
    	$userMock = $this->getMock("JUser", array("authorise"));
    	
    	$userMock->expects($this->exactly(1))
    	->method('authorise')
    	->with('core.admin')
    	->will($this->returnValue(false));
    
    	$reflector = new ReflectionProperty('JUser', '_authLevels');
    	$reflector->setAccessible(true);
    	$reflector->setValue($userMock, array(1,2,3,4,5,6,7,8,9,10));
    
    	// Let calls to the get-method with paramter 'user' return our JUser object.
    	$sessionMock->expects($this->exactly(1))
    	->method('get')
    	->with('user')
    	->will($this->returnValue($userMock));
    
    	// Set our JSession mock object in the JFactory
    	JFactory::$session = $sessionMock;
    
    	$_SERVER['REQUEST_METHOD'] = 'GET';
    	$actual = $this->object->add();
    
    	$reflector = new ReflectionProperty(get_class($this->object), 'redirect');
    	$reflector->setAccessible(true);
    
    	$this->assertEquals($expected, $actual);
    }
    
    /**
     * Method to test the save function
     *
     * @covers ::save
     */
    public function testsave()
    {
    	$expected1 =  "index.php?option=com_thm_organizer&view=color_manager";
    	$expected2 = "COM_THM_ORGANIZER_MESSAGE_SAVE_SUCCESS";
    	
    	// Mock the JSession object and mark the get-method to be manipulated
    	$sessionMock = $this->getMock("JSession", array("get"));
  
    	$userMock = $this->getMock("JUser", array("authorise"));
    
    	$userMock->expects($this->exactly(1))
    	->method('authorise')
    	->with('core.admin')
    	->will($this->returnValue(true));
    
    	$reflector = new ReflectionProperty('JUser', '_authLevels');
    	$reflector->setAccessible(true);
    	$reflector->setValue($userMock, array(1,2,3,4,5,6,7,8,9,10));
    	
    	// Mock getModel Function
    	$functionMock = $this->getMock("THM_OrganizerControllerColor", array("getModel"));
    	$functionMock->expects($this->exactly(1)) //todo
    	->method('getModel')
    	->with('color')
    	->will($this->returnValue(new MockClassModelTrue()));
    	$this->object = $functionMock;
    
    	// Let calls to the get-method with paramter 'user' return our JUser object.
    	$sessionMock->expects($this->exactly(1))
    	->method('get')
    	->with('user')
    	->will($this->returnValue($userMock));
    
    	// Set our JSession mock object in the JFactory
    	JFactory::$session = $sessionMock;

    	$_SERVER['REQUEST_METHOD'] = 'GET';
    	JRequest::setVar('id', '0');
       	$this->object->setRedirect("index.php?option=com_thm_organizer&view=color_edit");
      
       	
       
        $this->object->save();
       	
       	
       	$reflector = new ReflectionProperty(get_class($this->object), 'redirect');
    	$reflector->setAccessible(true);
    	$actual1 = $reflector->getValue($this->object);
    	
    	$actual2 = $this->object->get('message');
    
    	$this->assertEquals($expected1, $actual1);
    	$this->assertEquals($expected2, $actual2);
    	
    }
    
    /**
     * Method to test the save function
     *
     * @covers ::save
     */
    public function testsave2()
    {
    	$expected = null;
    	 
    	// Mock the JSession object and mark the get-method to be manipulated
    	$sessionMock = $this->getMock("JSession", array("get"));
    
    	$userMock = $this->getMock("JUser", array("authorise"));
    	
    	$userMock->expects($this->exactly(1))
    	->method('authorise')
    	->with('core.admin')
    	->will($this->returnValue(false));
    
    	$reflector = new ReflectionProperty('JUser', '_authLevels');
    	$reflector->setAccessible(true);
    	$reflector->setValue($userMock, array(1,2,3,4,5,6,7,8,9,10));
    
    	// Let calls to the get-method with paramter 'user' return our JUser object.
    	$sessionMock->expects($this->exactly(1))
    	->method('get')
    	->with('user')
    	->will($this->returnValue($userMock));
    
    	// Set our JSession mock object in the JFactory
    	JFactory::$session = $sessionMock;
    
    	$actual = $this->object->save();
    
    	$reflector = new ReflectionProperty(get_class($this->object), 'redirect');
    	$reflector->setAccessible(true);
    
    	$this->assertEquals($expected, $actual);
    }
    
    /**
     * Method to test the save function
     *
     * @covers ::save
     */
    public function testsave3()
    {
    	$expected1 =  "index.php?option=com_thm_organizer&view=color_manager";
    	$expected2 = "COM_THM_ORGANIZER_MESSAGE_SAVE_FAIL";
    
    	// Mock the JSession object and mark the get-method to be manipulated
    	$sessionMock = $this->getMock("JSession", array("get"));
    
    	$userMock = $this->getMock("JUser", array("authorise"));
    
    	$userMock->expects($this->exactly(1))
    	->method('authorise')
    	->with('core.admin')
    	->will($this->returnValue(true));
    
    	$reflector = new ReflectionProperty('JUser', '_authLevels');
    	$reflector->setAccessible(true);
    	$reflector->setValue($userMock, array(1,2,3,4,5,6,7,8,9,10));
    
    	// Let calls to the get-method with paramter 'user' return our JUser object.
    	$sessionMock->expects($this->exactly(1))
    	->method('get')
    	->with('user')
    	->will($this->returnValue($userMock));
    	
    	// Mock getModel Function
    	$functionMock = $this->getMock("THM_OrganizerControllerColor", array("getModel"));
    	$functionMock->expects($this->exactly(1)) //todo
    	->method('getModel')
    	->with('color')
    	->will($this->returnValue(new MockClassModelFalse()));
    	$this->object = $functionMock;
    
    	// Set our JSession mock object in the JFactory
    	JFactory::$session = $sessionMock;
    	
    	$this->object->save();
    	
    	$reflector = new ReflectionProperty(get_class($this->object), 'redirect');
    	$reflector->setAccessible(true);
    	$actual1 = $reflector->getValue($this->object);
    
    	$actual2 = $this->object->get('message');
    
    	$this->assertEquals($expected1, $actual1);
    	$this->assertEquals($expected2, $actual2);
    }
    
    /**
     * Method to test the delete function
     *
     * @covers ::delete
     */
 public function testdelete()
    {
    	$expected1 =  "index.php?option=com_thm_organizer&view=color_manager";
    	$expected2 = "COM_THM_ORGANIZER_MESSAGE_DELETE_SUCCESS";
    	
    	// Mock the JSession object and mark the get-method to be manipulated
    	$sessionMock = $this->getMock("JSession", array("get"));
    	
    	$userMock = $this->getMock("JUser", array("authorise"));
    	
    	$userMock->expects($this->exactly(1))
    	->method('authorise')
    	->with('core.admin')
    	->will($this->returnValue(true));
    
    	$reflector = new ReflectionProperty('JUser', '_authLevels');
    	$reflector->setAccessible(true);
    	$reflector->setValue($userMock, array(1,2,3,4,5,6,7,8,9,10));
    	
    	// Mock getModel Function
    	$functionMock = $this->getMock("THM_OrganizerControllerColor", array("getModel"));
    	$functionMock->expects($this->exactly(1)) //todo
    	->method('getModel')
    	->with('color')
    	->will($this->returnValue(new MockClassModelTrue()));
    	$this->object = $functionMock;
    
    	// Let calls to the get-method with paramter 'user' return our JUser object.
    	$sessionMock->expects($this->exactly(1))
    	->method('get')
    	->with('user')
    	->will($this->returnValue($userMock));
    
    	// Set our JSession mock object in the JFactory
    	JFactory::$session = $sessionMock;
    	
    	$this->object->delete();
    	
    	$reflector = new ReflectionProperty(get_class($this->object), 'redirect');
    	$reflector->setAccessible(true);
    	$actual1 = $reflector->getValue($this->object);
    	
    	$actual2 = $this->object->get('message');
    
    	$this->assertEquals($expected1, $actual1);
    	$this->assertEquals($expected2, $actual2);
    }
    
    /**
     * Method to test the delete function
     *
     * @covers ::delete
     */
    public function testdelete2()
    {
    	$expected = null;
    	 
    	// Mock the JSession object and mark the get-method to be manipulated
    	$sessionMock = $this->getMock("JSession", array("get"));
    
    	$userMock = $this->getMock("JUser", array("authorise"));
    	
    	$userMock->expects($this->exactly(1))
    	->method('authorise')
    	->with('core.admin')
    	->will($this->returnValue(false));
    
    	$reflector = new ReflectionProperty('JUser', '_authLevels');
    	$reflector->setAccessible(true);
    	$reflector->setValue($userMock, array(1,2,3,4,5,6,7,8,9,10));
    
    	// Let calls to the get-method with paramter 'user' return our JUser object.
    	$sessionMock->expects($this->exactly(1))
    	->method('get')
    	->with('user')
    	->will($this->returnValue($userMock));
    
    	// Set our JSession mock object in the JFactory
    	JFactory::$session = $sessionMock;
    
    	$_SERVER['REQUEST_METHOD'] = 'GET';
    	$actual = $this->object->delete();
    
    	$reflector = new ReflectionProperty(get_class($this->object), 'redirect');
    	$reflector->setAccessible(true);
    
    	$this->assertEquals($expected, $actual);
    }
    
    /**
     * Method to test the delete function
     *
     * @covers ::delete
     */
    public function testdelete3()
    {
    	$expected1 =  "index.php?option=com_thm_organizer&view=color_manager";
    	$expected2 = "COM_THM_ORGANIZER_MESSAGE_DELETE_FAIL";
    	 
    	// Mock the JSession object and mark the get-method to be manipulated
    	$sessionMock = $this->getMock("JSession", array("get"));
    
    	$userMock = $this->getMock("JUser", array("authorise"));
    	
    	$userMock->expects($this->exactly(1))
    	->method('authorise')
    	->with('core.admin')
    	->will($this->returnValue(true));

    	$reflector = new ReflectionProperty('JUser', '_authLevels');
    	$reflector->setAccessible(true);
    	$reflector->setValue($userMock, array(1,2,3,4,5,6,7,8,9,10));
    	
    	// Mock getModel Function
    	$functionMock = $this->getMock("THM_OrganizerControllerColor", array("getModel"));
    	$functionMock->expects($this->exactly(1)) //todo
    	->method('getModel')
    	->with('color')
    	->will($this->returnValue(new MockClassModelFalse()));
    	$this->object = $functionMock;
    	
    	// Let calls to the get-method with paramter 'user' return our JUser object.
    	$sessionMock->expects($this->exactly(1))
    	->method('get')
    	->with('user')
    	->will($this->returnValue($userMock));
    	
    	// Set our JSession mock object in the JFactory
    	JFactory::$session = $sessionMock;
    	
    	$this->object->delete();
    	 
    	$reflector = new ReflectionProperty(get_class($this->object), 'redirect');
    	$reflector->setAccessible(true);
    	$actual1 = $reflector->getValue($this->object);
    	 
    	$actual2 = $this->object->get('message');
    
    	$this->assertEquals($expected1, $actual1);
    	$this->assertEquals($expected2, $actual2);
    }
    
    /**
     * Method to test the cancel function
     *
     * @covers ::cancel
     */
    public function testcancel()
    {
    	$expected =  "index.php?option=com_thm_organizer&view=color_manager";
    
    	// Mock the JSession object and mark the get-method to be manipulated
    	$sessionMock = $this->getMock("JSession", array("get"));
    
    	$userMock = $this->getMock("JUser", array("authorise"));
    
    	$userMock->expects($this->exactly(1))
    	->method('authorise')
    	->with('core.admin')
    	->will($this->returnValue(true));
    
    	$reflector = new ReflectionProperty('JUser', '_authLevels');
    	$reflector->setAccessible(true);
    	$reflector->setValue($userMock, array(1,2,3,4,5,6,7,8,9,10));
    
    	// Let calls to the get-method with paramter 'user' return our JUser object.
    	$sessionMock->expects($this->exactly(1))
    	->method('get')
    	->with('user')
    	->will($this->returnValue($userMock));
    
    	// Set our JSession mock object in the JFactory
    	JFactory::$session = $sessionMock;
    
    	$this->object->cancel();
    
    	$reflector = new ReflectionProperty(get_class($this->object), 'redirect');
    	$reflector->setAccessible(true);
    	$actual = $reflector->getValue($this->object);
    
    	$this->assertEquals($expected, $actual);
    }
    
    /**
     * Method to test the cancel function
     *
     * @covers ::cancel
     */
    public function testcancel2()
    {
    	$expected = null;
    	 
    	// Mock the JSession object and mark the get-method to be manipulated
    	$sessionMock = $this->getMock("JSession", array("get"));
    
    	$userMock = $this->getMock("JUser", array("authorise"));
    	
    	$userMock->expects($this->exactly(1))
    	->method('authorise')
    	->with('core.admin')
    	->will($this->returnValue(false));
    
    	$reflector = new ReflectionProperty('JUser', '_authLevels');
    	$reflector->setAccessible(true);
    	$reflector->setValue($userMock, array(1,2,3,4,5,6,7,8,9,10));
    
    	// Let calls to the get-method with paramter 'user' return our JUser object.
    	$sessionMock->expects($this->exactly(1))
    	->method('get')
    	->with('user')
    	->will($this->returnValue($userMock));
    
    	// Set our JSession mock object in the JFactory
    	JFactory::$session = $sessionMock;
    
    	$actual = $this->object->cancel();
    
    	$reflector = new ReflectionProperty(get_class($this->object), 'redirect');
    	$reflector->setAccessible(true);
    
    	$this->assertEquals($expected, $actual);
    }
}

class MockClassModelFalse{
	public function delete()
    {
    	return false;
    }
    
    public function save()
    {
    	return false;
    }
}

class MockClassModelTrue{
	public function delete()
	{
		return true;
	}

	public function save()
	{
		return true;
	}
}