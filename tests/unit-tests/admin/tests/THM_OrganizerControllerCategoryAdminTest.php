<?php
/**
 * @package    THM_Organizer.UnitTest
 * @author     Wolf Rost <Wolf.Rost@mni.thm.de>
 * @copyright  Copyright (C) 2005 - 2014 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */

// Include the SUT class
require_once JPATH_ADMINISTRATOR . '/components/com_thm_organizer/controllers/category.php';

/**
 * Class THM_OrganizerControllerCategoryAdminTest
 *
 * @package             com_thm_organizer
 * @coversDefaultClass  THM_OrganizerControllerCategory
 *
 * @requires            extension sqlite3
 */
class THM_OrganizerControllerCategoryAdminTest extends TestCase
{

    /**
     * @var THM_OrganizerModelConsumption
     * @access protected
     */
    protected $object;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     * 
     * @return  null
     */
    protected function setUp()
    {
        parent::setup();

        $this->saveFactoryState();

        JFactory::$application = $this->getMockCmsApp();

        JLoader::register('JToolBarHelper', JPATH_ADMINISTRATOR . '/includes/toolbar.php');

        $config = array();

        $this->object = new THM_OrganizerControllerCategory();
        JTable::addIncludePath(JPATH_COMPONENT . '/tables');
    }

    /**
     * Overrides the parent tearDown method.
     *
     * @return  void
     *
     * @see     PHPUnit_Framework_TestCase::tearDown()
     * @since   3.2
     */
    protected function tearDown()
    {
        $this->restoreFactoryState();

        $this->object = null;

        parent::tearDown(); // TODO: Change the autogenerated stub
    }
    
    /**
     * Method to test the edit function
     *
     * @covers ::add
     */
    public function testedit()
    {
        $this->markTestSkipped(
            'Waiting for decision redirect or parent::display in controller.'
        );

        $expected = "category_edit";

        // Mock the JSession object and mark the get-method to be manipulated
        $sessionMock = $this->getMock("JSession", array("get"));

        $userMock = $this->getMock("JUser", array("authorise"));

        $userMock->expects($this->exactly(1))
            ->method('authorise')
            ->with('core.admin')
            ->will($this->returnValue(true));

        $reflector = new ReflectionProperty('JUser', '_authLevels');
        $reflector->setAccessible(true);
        $reflector->setValue($userMock, array(1,2,3,4,5,6,7,8,9,10));

        // Let calls to the get-method with paramter 'user' return our JUser object.
//        $sessionMock->expects($this->any())
//            ->method('get')
//            ->with('user')
//            ->will($this->returnValue($userMock));
//
//        // Let calls to the get-method with paramter 'user' return our JUser object.
//        $sessionMock->expects($this->any())
//            ->method('get')
//            ->with('session.token')
//            ->will($this->returnValue(""));

        // Set our JSession mock object in the JFactory
        JFactory::$session = $sessionMock;

        $this->object->edit();
        $actual = JFactory::getApplication()->input->get('view');

        $reflector = new ReflectionProperty(get_class($this->object), 'redirect');
        $reflector->setAccessible(true);
        $actual = $reflector->getValue($this->object);

        $this->assertEquals($expected, $actual);
    }
}