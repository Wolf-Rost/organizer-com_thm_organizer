<?php

/**
 * @package    THM_Organizer.UnitTest
 * @author     Wolf Rost <Wolf.Rost@mni.thm.de>
 * @copyright  Copyright (C) 2005 - 2014 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */
// Include the SUT class
require_once JPATH_BASE . '/components/com_thm_organizer/models/scheduler.php';

/**
 * Class THM_OrganizerModelConsumptionSiteTest
 *
 * @package             com_thm_organizer
 * @coversDefaultClass  THM_OrganizerModelConsumption
 *
 * @requires            extension sqlite3
 */
class THM_OrganizerModelSchedulerSiteTest extends TestCaseDatabase {

    /**
     * Minimun Joomla version to run this test,
     * if the Joomla version is below this version the test will be skipped.
     */
    const MIN_JOOMLA_VERSION_FOR_TESTS = "3";

    /**
     * @var THM_OrganizerModelConsumption
     * @access protected
     */
    protected $object, $data, $eventid;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     * 
     * @return  null
     */
    protected function setUp() {
        parent::setup();
        /* if(!JVersion::isCompatible(self::MIN_JOOMLA_VERSION_FOR_TESTS))
          {
          $this->markTestSkipped("Minimum Joomla version must be " . self::MIN_JOOMLA_VERSION_FOR_TESTS);
          }
         */
        //parent::setup();

        $this->saveFactoryState();



        JFactory::$session = $this->getMockSession();
        //JFactory::$config = $this->getMockConfig();
        //JFactory::$application = $this->getMockCmsApp();
        JFactory::$application = $this->getMockApplication();
        // JFactory::$application-
        //var_dump(JFactory::$application->);
        //var_dump(JFactory::$application);
        //JFactory::$application->c            
        //JFactory::$application = $this->getMockApplication();
        //JFactory::$document = $this->getMockDocument();
        //JFactory::$session = $this->getMockSession();
        //var_dump($this->getMockConfig());   

        $connect = parent::getConnection();
        //$assets = $this->getDataSet();
        $this->_db = JFactory::getDbo();
        $this->object = new THM_OrganizerModelScheduler;


        
    }

    /**
     * Overrides the parent tearDown method.
     *
     * @return  void
     *
     * @see     PHPUnit_Framework_TestCase::tearDown()
     * @since   3.2
     */
    protected function tearDown() {
        $this->restoreFactoryState();

        $this->object = null;

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * Gets the data set to be loaded into the database during setup
     *
     * @return xml dataset
     */
    protected function getDataSet() {
        $dataSet = new PHPUnit_Extensions_Database_DataSet_CsvDataSet(',', "'", '\\');

        //$dataSet->addTable('jos_thm_organizer_events', JPATH_TEST_DATABASE . '/jos_thm_organizer_events.csv');
        //$dataSet->addTable('jos_thm_organizer_categories', JPATH_TEST_DATABASE . '/jos_thm_organizer_categories.csv');        
        $dataSet->addTable('jos_extensions', JPATH_TEST_DATABASE . '/jos_extensions.csv');
        $dataSet->addTable('jos_categories', JPATH_TEST_DATABASE . '/jos_categories.csv');        
        $dataSet->addTable('jos_thm_organizer_schedules', JPATH_TEST_DATABASE . '/jos_thm_organizer_schedules.csv');
        $dataSet->addTable('jos_thm_organizer_rooms', JPATH_TEST_DATABASE . '/jos_thm_organizer_rooms.csv');
        $dataSet->addTable('jos_thm_organizer_teachers', JPATH_TEST_DATABASE . '/jos_thm_organizer_teachers.csv');
        return $dataSet;
    }

    public  function testgetSessionIDNoUser(){
        $actual = $this->object->getSessionID();
        $this->assertEquals("", $actual);
    }
    
    public function testgetSessionIDAdminUser(){
        $MockAppObj = $this->getMockApplication();
        
        $user = array('username' => "admin");
        /*$MockAppObj->expects($this->exactly(1))
                ->method('JFactory::getUser')
                ->will($this->returnValue($user));*/
        JFactory::$application = $MockAppObj;
        //JFactory::getUser();
        $actual = $this->object->getSessionID();
        $this->assertEquals('', $actual);
    }
    
    public function testisComAvailable_isNotAvailable(){
        $actual = $this->object->isComAvailable("blablub");
        $this->assertEquals(false, $actual);
    }
    
    public function testisComAvailable_isAvailable(){
        $actual = $this->object->isComAvailable("com_admin");
        $this->assertEquals(true, $actual);
    }
    
    public function testgetActiveScheduleFail(){
        $actual = $this->object->getActiveSchedule(1);
        $this->assertEquals(false, $actual);
    }
    
    public function testgetActiveScheduleCorrect(){
        $actual = $this->object->getActiveSchedule("STK;WS;2013-10-07;2014-10-05");
        $expected = new stdClass();
        $expected->id="1";
        $expected->departmentname = "STK";
        $expected->semestername = "WS";
        $expected->creationdate = "2013-10-29";
        $expected->creationtime = 'NULL';
        $expected->description = "";
        $expected->schedule = "";
        $expected->active = "1";
        $expected->startdate = "2013-10-07";
        $expected->enddate = "2014-10-05";
        $this->assertEquals($expected, $actual);
    }
    
    public function testgetActiveScheduleByIDFail(){
        $actual = $this->object->getActiveScheduleByID(100);
        $this->assertEquals(false, $actual);
    }
    
    public function testgetActiveScheduleByIDCorrect(){
        $actual = $this->object->getActiveScheduleByID(1);
        $expected = new stdClass();
        $expected->id="1";
        $expected->departmentname = "STK";
        $expected->semestername = "WS";
        $expected->creationdate = "2013-10-29";
        $expected->creationtime = 'NULL';
        $expected->description = "";
        $expected->schedule = "";
        $expected->active = "1";
        $expected->startdate = "2013-10-07";
        $expected->enddate = "2014-10-05";
        $this->assertEquals($expected, $actual);
    }
    
    public function testgetRooms(){
        $actual = $this->object->getRooms();
        $expected = new stdClass();
        $expected->id="295";
        $expected->gpuntisID = "A10.2.01";
        $expected->name = "A10.2.01";
        $expected->longname = "A.2.01";
        $expected->typeID = '5';
        $ary = array();
        array_push($ary,$expected);
        $this->assertEquals($ary,$actual);
    }
    
    public function testgetTeachers(){
        $actual = $this->object->getTeachers();
        $expected = new stdClass();
        $expected->id="130";
        $expected->gpuntisID = "AmanA";
        $expected->surname = "Amanullah";
        $expected->forename = "Ahsan";
        $expected->username = "aamn09";
        $expected->fieldID = '12';
        $expected->title = "NULL";
        $ary = array();
        array_push($ary,$expected);
        $this->assertEquals($ary,$actual);
    }
    
}
