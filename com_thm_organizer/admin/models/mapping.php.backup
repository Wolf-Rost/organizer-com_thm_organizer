<?php
// No direct access to this file
defined('_JEXEC') or die('Restricted access');

// import Joomla modelform library
jimport('joomla.application.component.modeladmin');


class THM_OrganizerModelMapping extends JModelAdmin {
	


	function adjustParentAssets($assetId, $semesters) {

		$db 		= JFactory::getDBO();
		$id = $_SESSION['stud_id'];

		$query = $db->getQuery(true);
		$query->select("*");
		$query->select("#__thm_organizer_assets_tree.id as asset_tree_id");
		$query->from('#__thm_organizer_assets_tree');
		$query->join('inner', '#__thm_organizer_assets_semesters ON #__thm_organizer_assets_tree.id = #__thm_organizer_assets_semesters.assets_tree_id');
		$query->join('inner', '#__thm_organizer_semesters_majors ON #__thm_organizer_semesters_majors.id = #__thm_organizer_assets_semesters.semesters_majors_id');
		$query->where("#__thm_organizer_assets_tree.parent_id = $assetId");
		$query->where("#__thm_organizer_semesters_majors.major_id= $id");
		$db->setQuery($query);
		$children = $db->loadAssocList();

		if(count($children) > 0) {

			foreach($children as $row) {
				$asset_id = $row['asset_tree_id'];
				$semesters_majors_id = $row['semesters_majors_id'];

				if(!in_array($row->semesters_majors_id, $semesters )) {

					/* build the query */
					$query = $db->getQuery(true);
					$query->delete("#__thm_organizer_assets_semesters");
					$query->where("assets_tree_id = $asset_id");
					$query->where("semesters_majors_id = $semesters_majors_id");
					$db->setQuery( $query );
					$db->query( $query );
						
				}


				foreach($semesters as $semester) {
					//$asset_id = $row['asset_tree_id'];
					$semester_id = $semester['semesters_majors_id'];

					/* maps the actual asset to a additional semester */
					$query = $db->getQuery(true);
					$query->insert('#__thm_organizer_assets_semesters');
					$query->set("assets_tree_id = $asset_id");
					$query->set("semesters_majors_id = $semester");
					$db->setQuery($query);
					$db->query();

				}
		
				self::adjustParentAssets($row['asset'], $semesters);
					
			}

		}

	}
	
	public function getMaxOrdering($parent, $major) {
		
		$db 		= JFactory::getDBO();
		
		$query = $db->getQuery(true);
		$query->select("MAX(ordering) as max_ordering");
		$query->from('#__thm_organizer_assets_tree');
		$query->join('inner', '#__thm_organizer_assets_semesters ON #__thm_organizer_assets_tree.id = #__thm_organizer_assets_semesters.assets_tree_id');
		$query->join('inner', '#__thm_organizer_semesters_majors ON #__thm_organizer_semesters_majors.id = #__thm_organizer_assets_semesters.semesters_majors_id');
		$query->where("#__thm_organizer_assets_tree.parent_id = $parent");
		$query->where("#__thm_organizer_semesters_majors.major_id= $major");
		$db->setQuery($query);
		$rows = $db->loadAssocList();
	
		return $rows[0]['max_ordering'];
		
	}

	/**
	 *
	 * Overwritten save method
	 * @param Array $data
	 */
	public function save($data) {
		$db = JFactory::getDbo();
		$stud_id = $_SESSION['stud_id'];

		if($data['parent_id'] == 0) {
				
			self::adjustParentAssets($data['asset'], JRequest::getVar('semesters'));
		}
		
		$ordering = self::getMaxOrdering($data['parent_id'], $stud_id) + 1;
		

		/* save the POST data to the mapping table */
		//$res = parent::save($data);
		
		
		$asset= $data['asset'];
		$parent_id = $data['parent_id'];
		$color = $data['color_id'];
			
		// Wir erstellen einen neuen Query
		$sql = $db->getQuery(true);
		$sql->insert("#__thm_organizer_assets_tree");
		$sql->set('color_id='.  $color);
		$sql->set("asset= $asset");
		$sql->set("parent_id= $parent_id");
		$sql->set("ordering= $ordering");

		$db->setQuery((string)$sql);
		$db->query( );


		/* get the last inserted id from the previous stored row*/
		$insertid = $db->insertid();
	//	echo $insertid;

		/* get the post data */
		$semesters = JRequest::getVar('semesters');

		/* edit of an existent row */
		if(JRequest::getVar('id')) {

			/* get the current id of the edited asset */
			$insertid = JRequest::getVar('id');
			

			/* determine all mapped semesters of this asset */
			$query = $db->getQuery(true);
			$query->select("*");
			$query->from("#__thm_organizer_assets_semesters");
			$query->where("assets_tree_id = $insertid");
			$db->setQuery( $query );
			$rows = $db->loadObjectList();

			/* iterate over each found mapping */
			foreach ($rows as $row) {
					
				/* delete the mapping if the current mapping isn't part of the actual post data */
				if(!in_array($row->stud_sem_id, $semesters )  ) {

					/* build the query */
					$query = $db->getQuery(true);
					$query->delete("#__thm_organizer_assets_semesters");
					$query->where("assets_tree_id = $insertid");
					$query->where("semesters_majors_id = $row->semesters_majors_id");
					$db->setQuery( $query );
					$db->query( $query );
					
				}

			}


		} else {
			$db = JFactory::getDbo();
			$insertid = $db->insertid();
		}


		/* iterate over each semester of the post request */
		foreach($semesters as $semester) {

			/* maps the actual asset to a additional semester */
			$query = $db->getQuery(true);
			$query->insert('#__thm_organizer_assets_semesters');
			$query->set("assets_tree_id = $insertid");
			$query->set("semesters_majors_id = $semester");
			$db->setQuery($query);
			$db->query();
			//echo (string)$query;
		}

		/* refresh all lineages and depth level of the assets tree of the selected major */
		self::setLineage();
		//self:asd();

		return true;


	}

	/**
	 *
	 * Determine the path of the given tree node
	 * @param Int $node
	 * @return multitype:string
	 */
	function get_path($node) {
		$db = JFactory::getDBO();
		$query = $db->getQuery(true);

		/* get the selected major id */
		$stud_sem_id = $_SESSION['stud_id'] ;

		/* determine all node by a given asset id */
		$query->select("*");
		$query->from("#__thm_organizer_assets_tree");
		$query->join('inner', '#__thm_organizer_assets_semesters ON #__thm_organizer_assets_semesters.assets_tree_id = #__thm_organizer_assets_tree.id');
		$query->join('inner', '#__thm_organizer_semesters_majors ON #__thm_organizer_semesters_majors.id = #__thm_organizer_assets_semesters.semesters_majors_id');
		$query->where("asset = $node");
		$query->where("major_id = $stud_sem_id");
		$db->setQuery($query);
		$row = $db->loadAssocList();

		/* this array will contain the actual path */
		$path = array();

		/* builds the current paths and return it */
		if ($row[0]['parent_id'] != null) {
			$path[] = $row[0]['parent_id'] . "/" ;
			$path = array_merge(self::get_path($row[0]['parent_id']), $path); //find all parent nodes recursively
		} else {
			$path[] = "/";
		}

		return $path;
	}


	/**
	 *
	 * Enter description here ...
	 */
	function setLineage() {

		/* get the current major id */
		$stud_sem_id = $_SESSION['stud_id'] ;

		/* select the tree of the current major */
		$db = JFactory::getDBO();
		$query = $db->getQuery(true);

		$query->select("*");
		$query->from("#__thm_organizer_assets_tree");
		$query->join('inner', '#__thm_organizer_assets_semesters ON #__thm_organizer_assets_semesters.assets_tree_id = #__thm_organizer_assets_tree.id');
		$query->join('inner', '#__thm_organizer_semesters_majors ON #__thm_organizer_semesters_majors.id = #__thm_organizer_assets_semesters.semesters_majors_id');
		$query->where("asset <> 0");
		$query->where("major_id = $stud_sem_id");
		$query->group(" asset");

		$db->setQuery($query);
		$rows = $db->loadObjectList();

		/* iterate over each node of the tree */
		foreach($rows as $row) {
				
			/* determine the path and depth level of the current node */
			$depth = count(self::get_path($row->asset)) - 1;
			$path = implode(self::get_path($row->asset));
				
			/* write it to the database */
			//$query = "UPDATE #__thm_organizer_assets_tree SET lineage = '$path', depth = $depth WHERE asset = $row->asset"; //AND stud_sem_id= $row->stud_sem_id";
			
			$query = "UPDATE #__thm_organizer_assets_tree JOIN #__thm_organizer_assets_semesters ON #__thm_organizer_assets_semesters.assets_tree_id = #__thm_organizer_assets_tree.id".  
					 " JOIN #__thm_organizer_semesters_majors ON #__thm_organizer_semesters_majors.id = #__thm_organizer_assets_semesters.semesters_majors_id".
					 " SET lineage = '$path', depth = $depth WHERE asset = $row->asset AND major_id = $stud_sem_id";
			
			echo (String)$query;
			
			
			$db->setQuery($query);
			$db->query();

		}

	}


	public function getTable($type = 'mapping', $prefix = 'THM_curriculumTable', $config = array()) {
		return JTable::getInstance($type, $prefix, $config);
	}

	public function getForm($data = array(), $loadData = true) {
		// Get the form.
		$form = $this->loadForm('com_thm_organizer.mapping', 'mapping', array('control' => 'jform', 'load_data' => $loadData));

		if (empty($form))
		{
			return false;
		}
		return $form;
	}

	protected function loadFormData() {
		// Check the session for previously entered form data.
		$data = JFactory::getApplication()->getUserState('com_thm_organizer.edit.mapping.data', array());
		if (empty($data))
		{
			$data = $this->getItem();
		}
		return $data;
	}


	/**
	 *
	 * Overwritten publish method. Publish a given tree node
	 * @return boolean
	 */
	function publish() {

		/* get the post data */
		$cid = JRequest::getVar('cid', array(), '', 'array');

		/* create the update sql statement */
		$query = "UPDATE `#__thm_organizer_assets_tree` SET `published` = '1' WHERE `id` =";

		/* iterate over each tree node, if multiple node were selected */
		foreach($cid as $id) {
				
			$this->_db->setQuery($query.$id);
			if(!$this->_db->query()) {
				return false;
			}
		}
		return true;
	}


	/**
	 *
	 * Overwritten unpublish method. Unpublishs a given tree node
	 * @return boolean
	 */
	function unpublish() {
		/* get the post data */
		$cid = JRequest::getVar('cid', array(), '', 'array');

		/* create the update sql statement */
		$query = "UPDATE `#__thm_organizer_assets_tree` SET `published` = '0' WHERE `id` =";

		/* iterate over each tree node, if multiple node were selected */
		foreach($cid as $id) {
			$this->_db->setQuery($query.$id);
				
			if(!$this->_db->query()) {
				return false;
			}
		}
		return true;

	}
}
