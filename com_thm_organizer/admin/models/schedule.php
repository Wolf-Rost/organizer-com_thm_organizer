<?php
/**
 * @category    Joomla component
 * @package     THM_Organizer
 * @subpackage  com_thm_organizer.admin
 * @name        THM_OrganizerModelSchedule
 * @author      James Antrim, <james.antrim@mni.thm.de>
 * @copyright   2014 TH Mittelhessen
 * @license     GNU GPL v.2
 * @link        www.mni.thm.de
 */
defined('_JEXEC') or die;
JTable::addIncludePath(JPATH_BASE . '/administrator/components/com_thm_organizer/tables');

require_once 'lesson.php';
require_once 'teacher.php';
require_once 'room.php';
require_once 'subject.php';
require_once 'pool.php';

define('ERROR', 0);
define('MERGE', 1);
define('TOO_FEW', 2);
define('CHECK_DEPARTMENTS', 3);
define('CHECK_DATES', 4);
define('NOT_ACTIVE', 5);

/**
 * Class enapsulating data abstraction and business logic for xml schedules
 * generated by Untis software.
 *
 * @category    Joomla.Component.Admin
 * @package     thm_organizer
 * @subpackage  com_thm_organizer.admin
 */
class THM_OrganizerModelSchedule extends JModelLegacy
{
    /**
     * Array to hold error strings relating to critical data inconsistencies
     *
     * @var array
     */
    public $scheduleErrors = null;

    /**
     * Array to hold warning strings relating to minor data inconsistencies
     *
     * @var array
     */
    public $scheduleWarnings = null;

    /**
     * Object containing information from the actual schedule
     *
     * @var object
     */
    public $schedule = null;

    /**
     * Object conteining information from a reference schedule
     *
     * @var object
     */
    public $refSchedule = null;

    /**
     * saves a schedule in the database for later use
     *
     * @return   array  $statusReport  ['scheduleID']  true on save, false on db error
     *                                 ['errors']      critical data inconsistencies
     *                                 ['warnings']    minor data inconsistencies
     */
    public function upload()
    {
        $this->validate();
        $statusReport = $this->makeStatusReport();

        if (!empty($this->scheduleErrors))
        {
            return $statusReport;
        }

        $this->_db->transactionStart();

        try
        {
            $this->saveFields();
            $this->saveTeachers();
            $this->saveRoomTypes();
            $this->saveRooms();
            $this->setReference();
            $statusReport['scheduleID'] = $this->saveSchedule();
            $this->_db->transactionCommit();
        }
        catch (Exception $exception)
        {
            JFactory::getApplication()->enqueueMessage($exception->getMessage(), 'error');
            $this->_db->transactionRollback();
        }

        return $statusReport;
    }

    /**
     * Checks a given schedule in gp-untis xml format for data completeness and
     * consistency and gives it basic structure
     *
     * @return  array  array of strings listing inconsistencies empty if none
     *                 were found
     */
    public function validate()
    {
        $input = JFactory::getApplication()->input;
        $formFiles = $input->files->get('jform', array(), 'array');
        $file = $formFiles['file'];
        $xmlSchedule = simplexml_load_file($file['tmp_name']);

        $this->schedule         = new stdClass;
        $this->scheduleErrors   = array();
        $this->scheduleWarnings = array();

        $formData = $input->get('jform', array(), 'array');
        $rooms_required = isset($formData['rooms_required']);
        $this->_teacherModel = JModelLegacy::getInstance('teacher', 'THM_OrganizerModel');

        // General node
        // Creation Date & Time
        $creationDate = trim((string) $xmlSchedule[0]['date']);
        $this->validateDateAttribute('creationdate', $creationDate, 'CREATION_DATE', 'error');
        $creationTime = trim((string) $xmlSchedule[0]['time']);
        $this->validateTextAttribute('creationtime', $creationTime, 'CREATION_TIME', 'error');

        // School year dates
        $syStartDate = trim((string) $xmlSchedule->general->schoolyearbegindate);
        $this->validateDateAttribute('startdate', $syStartDate, 'SCHOOL_YEAR_START_DATE', 'error');
        $syEndDate = trim((string) $xmlSchedule->general->schoolyearenddate);
        $this->validateDateAttribute('enddate', $syEndDate, 'SCHOOL_YEAR_END_DATE', 'error');

        // Organizational Data
        $departmentname = trim((string) $xmlSchedule->general->header1);
        $this->validateTextAttribute('departmentname', $departmentname, 'ORGANIZATION', 'error', '/[\#\;]/');
        $semestername = trim((string) $xmlSchedule->general->footer);
        $this->validateTextAttribute('semestername', $semestername, 'TERM_NAME', 'error', '/[\#\;]/');

        // Term start & end dates
        $startDate = trim((string) $xmlSchedule->general->termbegindate);
        $this->validateDateAttribute('termStartDate', $startDate, 'TERM_START_DATE');
        $endDate = trim((string) $xmlSchedule->general->termenddate);
        $this->validateDateAttribute('termEndDate', $endDate, 'TERM_END_DATE');

        // Checks if term and school year dates are consistent
        $syStartTime = strtotime($syStartDate);
        $syEndTime = strtotime($syEndDate);
        $termStartDT = strtotime($startDate);
        $termEndDT = strtotime($endDate);
        if ($termStartDT < $syStartTime OR $termEndDT > $syEndTime OR $termStartDT >= $termEndDT)
        {
            $this->scheduleErrors[] = JText::sprintf(
                                                      'COM_THM_ORGANIZER_ERROR_DATES_INCONSISTENT',
                                                      date('d.m.Y', $syStartDate),
                                                      date('d.m.Y', $syEndDate),
                                                      date('d.m.Y', $termStartDT),
                                                      date('d.m.Y', $termEndDT)
                                                     );
        }

        $this->schedule->periods = new stdClass;
        $this->validateResourceNode('timeperiods', 'Period', $xmlSchedule, 'PERIODS');

        $this->schedule->fields = new stdClass;
        $this->schedule->roomtypes = new stdClass;
        $this->schedule->lessontypes = new stdClass;
        $this->validateResourceNode('descriptions', 'Description', $xmlSchedule, 'DESCRIPTIONS');

        // Departments node holds degree names
        $this->schedule->degrees = new stdClass;
        $this->validateResourceNode('departments', 'Degree', $xmlSchedule, 'PROGRAMS');

        $this->schedule->rooms = new stdClass;
        $this->validateResourceNode('rooms', 'room', $xmlSchedule, 'ROOMS', true);

        $this->schedule->subjects = new stdClass;
        $this->validateResourceNode('subjects', 'subject', $xmlSchedule, 'SUBJECTS', true);

        $this->schedule->teachers = new stdClass;
        $this->validateResourceNode('teachers', 'teacher', $xmlSchedule, 'TEACHERS', true);

        $this->schedule->pools = new stdClass;
        $this->validateResourceNode('classes', 'pool', $xmlSchedule, 'POOLS', true);

        $this->initializeCalendar($syStartTime, $syEndTime);
        $this->schedule->lessons = new stdClass;
        if (empty($xmlSchedule->lessons))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_ERROR_LESSONS_MISSING");
        }
        else
        {
            $lessonModel = new THM_OrganizerModelLesson($this, $rooms_required);
            foreach ($xmlSchedule->lessons->children() as $lessonNode)
            {
                $lessonModel->validate($lessonNode);
            }
        }

        $status = $this->makeStatusReport();
        return $status;
    }

    /**
     * Validates a date attribute
     *
     * @param   string  $name      the attribute name
     * @param   string  $value     the attribute value
     * @param   string  $constant  the unique text constant fragment
     * @param   string  $severity  the severity of the item being inspected
     *
     * @return  void
     */
    public function validateDateAttribute($name, $value, $constant, $severity = 'error')
    {
        if (empty($value))
        {
            if ($severity == 'error')
            {
                $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_ERROR_{$constant}_MISSING");
                return;
            }
            if ($severity == 'warning')
            {
                $this->scheduleWarnings[] = JText::_("COM_THM_ORGANIZER_ERROR_{$constant}_MISSING");
            }
        }
        $this->schedule->$name = date('Y-m-d', strtotime($value));
        return;
    }

    /**
     * Validates a text attribute
     *
     * @param   string  $name      the attribute name
     * @param   string  $value     the attribute value
     * @param   string  $constant  the unique text constant fragment
     * @param   string  $severity  the severity of the item being inspected
     * @param   string  $regex     the regex to check the text against
     *
     * @return  void
     */
    private function validateTextAttribute($name, $value, $constant, $severity = 'error', $regex = '')
    {
        if (empty($value))
        {
            if ($severity == 'error')
            {
                $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_ERROR_{$constant}_MISSING");
                return;
            }
            if ($severity == 'warning')
            {
                $this->scheduleWarnings[] = JText::_("COM_THM_ORGANIZER_ERROR_{$constant}_MISSING");
            }
        }
        if (!empty($regex) AND preg_match($regex, $value))
        {
            if ($severity == 'error')
            {
                $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_ERROR_{$constant}_INVALID");
                return;
            }
            if ($severity == 'warning')
            {
                $this->scheduleWarnings[] = JText::_("COM_THM_ORGANIZER_ERROR_{$constant}_INVALID");
            }
        }
        $this->schedule->$name = $value;
        return;
    }

    /**
     * Validates a resource node which has no external model
     *
     * @param   string  $nodeName      the name of the node to be processed (external name)
     * @param   string  $resourceName  the name of the resource to be processed (internal name)
     * @param   object  &$xmlObject    the xml object being validated
     * @param   string  $constant      the unique text constant fragment
     * @param   bool    $external      if the validation is in an external model
     *
     * @return  void
     */
    private function validateResourceNode($nodeName, $resourceName, &$xmlObject, $constant, $external = false)
    {
        if (empty($xmlObject->$nodeName))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_ERROR_{$constant}_MISSING");
            return;
        }

        if ($external)
        {
            $model = JModelLegacy::getInstance($resourceName, 'THM_OrganizerModel');
            foreach ($xmlObject->$nodeName->children() as $resourceNode)
            {
                $model->validate($this, $resourceNode);
            }
            return;
        }

        $function = "validate$resourceName";
        foreach ($xmlObject->$nodeName->children() as $resourceNode)
        {
            $this->$function($resourceNode);
        }
    }

    /**
     * Validates an individual period. (called dynamically from validateResourceNode)
     *
     * @param   object  &$periodNode  a resource node (SimpleXML)
     *
     * @return void
     *
     * @SuppressWarnings(PHPMD.UnusedPrivateMethod)
     */
    protected function validatePeriod(&$periodNode)
    {
        $gpuntisID = trim((string) $periodNode[0]['id']);
        $periodID = str_replace('TP_', '', $gpuntisID);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_ERROR_PERIOD_ID_MISSING"), $this->scheduleErrors))
            {
                $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_ERROR_PERIOD_ID_MISSING");
            }
            return;
        }
        $this->schedule->periods->$periodID = new stdClass;
        $this->schedule->periods->$periodID->gpuntisID = $gpuntisID;

        $day = (int) $periodNode->day;
        if (empty($day))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_ERROR_PERIOD_DAY_MISSING", $periodID);
            return;
        }
        else
        {
            $this->schedule->periods->$periodID->day = $day;
        }

        $period = (int) $periodNode->period;
        if (empty($period))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_ERROR_PERIOD_PERIOD_MISSING", $periodID);
            return;
        }
        else
        {
            $this->schedule->periods->$periodID->period = $period;
        }

        $starttime = trim((string) $periodNode->starttime);
        if (empty($starttime))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_ERROR_PERIOD_START_TIME_MISSING", $periodID);
        }
        else
        {
            $this->schedule->periods->$periodID->starttime = $starttime;
        }

        $endtime = trim((string) $periodNode->endtime);
        if (empty($endtime))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_ERROR_PERIOD_END_TIME_MISSING", $periodID);
        }
        else
        {
            $this->schedule->periods->$periodID->endtime = $endtime;
        }
    }

    /**
     * Checks whether department nodes have the expected structure and required
     * information. (called dynamically from validateResourceNode)
     *
     * @param   object  &$descriptionNode  the description node to be validated (SimpleXML)
     *
     * @return  void
     *
     * @SuppressWarnings(PHPMD.UnusedPrivateMethod)
     */
    private function validateDescription(&$descriptionNode)
    {
        $gpuntisID = trim((string) $descriptionNode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_DSM_ID_MISSING"), $this->scheduleErrors))
            {
                $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_ERROR_DESCRIPTION_ID_MISSING");
            }
            return;
        }
        $descriptionID = str_replace('DS_', '', $gpuntisID);

        $longname = trim((string) $descriptionNode->longname);
        if (empty($longname))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_ERROR_DESCRIPTION_NAME_MISSING", $descriptionID);
            return;
        }

        $type = trim((string) $descriptionNode->flags);
        if (empty($type))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_ERROR_DESCRIPTION_TYPE_MISSING", $longname, $descriptionID);
            return;
        }

        switch ($type)
        {
            case 'f':
            case 'F':
                $this->schedule->fields->$descriptionID = new stdClass;
                $this->schedule->fields->$descriptionID->gpuntisID = $gpuntisID;
                $this->schedule->fields->$descriptionID->name = $longname;
                break;
            case 'r':
            case 'R':
                $this->schedule->roomtypes->$descriptionID = new stdClass;
                $this->schedule->roomtypes->$descriptionID->gpuntisID = $gpuntisID;
                $this->schedule->roomtypes->$descriptionID->name = $longname;
                break;
            case 'u':
            case 'U':
                $this->schedule->lessontypes->$descriptionID = new stdClass;
                $this->schedule->lessontypes->$descriptionID->gpuntisID = $gpuntisID;
                $this->schedule->lessontypes->$descriptionID->name = $longname;
                break;
        }
    }

    /**
     * Checks whether department nodes have the expected structure and required
     * information. (called dynamically from validateResourceNode)
     *
     * @param   SimpleXMLNode  &$departmentNode  the department node to be validated
     *
     * @return void
     *
     * @SuppressWarnings(PHPMD.UnusedPrivateMethod)
     */
    protected function validateDegree(&$departmentNode)
    {
        $gpuntisID = trim((string) $departmentNode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_ERROR_PROGRAM_ID_MISSING"), $this->scheduleErrors))
            {
                $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_ERROR_PROGRAM_ID_MISSING");
            }
            return;
        }
        $degreeID = str_replace('DP_', '', $gpuntisID);
        $this->schedule->degrees->$degreeID = new stdClass;
        $this->schedule->degrees->$degreeID->gpuntisID = $gpuntisID;

        $degreeName = (string) $departmentNode->longname;
        if (!isset($degreeName))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_ERROR_PROGRAM_NAME_MISSING", $degreeID);
            return;
        }
        $this->schedule->degrees->$degreeID->name = $degreeName;
    }

    /**
     * Creates an array with dates as indexes for the days of the given planning period
     *
     * @param   int  $syStartDate  the datetime upon which the school year begins
     * @param   int  $syEndDate    the datetime upon which the school year ends
     *
     * @return void
     */
    private function initializeCalendar($syStartDate, $syEndDate)
    {
        $calendar = new stdClass;

        // Calculate the school year length
        $syLength = floor(($syEndDate - $syStartDate) / 86400) + 1;
        $calendar->sylength = $syLength;

        $currentDT = $syStartDate;
        for ($currentDT; $currentDT <= $syEndDate; $currentDT = strtotime('+1 day', $currentDT))
        {
            // Create an index for the date
            $currentDate = date('Y-m-d', $currentDT);
            $calendar->$currentDate = new stdClass;

            // Add period indices
            $dow = date('w', $currentDT);
            foreach ($this->schedule->periods as $period)
            {
                if ($period->day == $dow)
                {
                    $calendar->$currentDate->{$period->period} = new stdClass;
                }
            }
        }
        $this->schedule->calendar = $calendar;
    }

    /**
     * Creates a status report based upon object error and warning messages
     *
     * @return array ['errors'] critical inconsistencies
     *               ['warnings'] minor inconsistencies
     */
    private function makeStatusReport()
    {
        $statusReport = array();
        if (count($this->scheduleErrors))
        {
            $statusReport['errors'] = "<br />" . implode("<br />", $this->scheduleErrors);
        }
        if (count($this->scheduleWarnings))
        {
            $statusReport['warnings'] = "<br />" . implode("<br />", $this->scheduleWarnings);
        }
        return $statusReport;
    }

    /**
     * Persists teacher field information from the uploaded schedule
     *
     * @return void
     */
    private function saveFields()
    {
        foreach ($this->schedule->fields as $field)
        {
            $data = array();
            $data['gpuntisID'] = $field->gpuntisID;
            $row = JTable::getInstance('Fields', 'thm_organizerTable');
            $row->load($data);
            $data['field'] = $field->name;
            $row->save($data);
        }
    }

    /**
     * Persists teacher information from the uploaded schedule
     *
     * @return void
     */
    private function saveTeachers()
    {
        foreach ($this->schedule->teachers as $teacher)
        {
            $pullData = array();
            $pullData['gpuntisID'] = $teacher->gpuntisID;
            $teacherRow = JTable::getInstance('teachers', 'thm_organizerTable');
            $teacherRow->load($pullData);
            if (!empty($teacher->description))
            {
                $pullData['gpuntisID'] = $this->schedule->fields->{$teacher->description}->gpuntisID;
                $fieldRow = JTable::getInstance('Fields', 'thm_organizerTable');
                $fieldExists = $fieldRow->load($pullData);
                if ($fieldExists)
                {
                    $teacher->fieldID = $fieldRow->id;
                }
            }
            $teacherRow->save($teacher);
        }
    }

    /**
     * Persists room type information from the uploaded schedule
     *
     * @return void
     */
    private function saveRoomTypes()
    {
        foreach ($this->schedule->roomtypes as $roomType)
        {
            $data = array();
            $data['gpuntisID'] = $roomType->gpuntisID;
            $roomTypeRow = JTable::getInstance('room_types', 'thm_organizerTable');
            $roomTypeRow->load($data);
            $details = explode(',', $roomType->name);
            if (isset($details[1]))
            {
                $data['type'] = $details[0];
                $data['subtype'] = $details[1];
            }
            else
            {
                $data['type'] = $details[0];
            }
            $roomTypeRow->save($data);
        }
    }

    /**
     * Persists room information from the uploaded schedule
     *
     * @return void
     */
    private function saveRooms()
    {
        foreach ($this->schedule->rooms as $room)
        {
            $pullData = array();
            $pullData['gpuntisID'] = $room->gpuntisID;
            $roomRow = JTable::getInstance('rooms', 'thm_organizerTable');
            $roomRow->load($pullData);
            if (!empty($room->description))
            {
                $pullData['gpuntisID'] = $this->schedule->roomtypes->{$room->description}->gpuntisID;
                $typeRow = JTable::getInstance('room_types', 'thm_organizerTable');
                $typeExists = $typeRow->load($pullData);
                if ($typeExists)
                {
                    $room->typeID = $typeRow->id;
                }
            }
            $roomRow->save($room);
        }
    }

    /**
     * Creates the delta to the chosen reference schedule
     *
     * @return boolean true on successful delta creation, otherwise false
     */
    public function setReference()
    {
        $reference = $this->getReferenceSchedule();
        if (empty($reference->id))
        {
            return true;
        }

        $this->refSchedule = json_decode($reference->schedule);

        $actual = JTable::getInstance('schedules', 'thm_organizerTable');
        if (empty($this->schedule))
        {
            $pullData = array(
                'departmentname' => $this->refSchedule->departmentname,
                'semestername' => $this->refSchedule->semestername,
                'startdate' => $this->refSchedule->startdate,
                'enddate' => $this->refSchedule->enddate,
                'active' => 1
            );
            $actualExists = $actual->load($pullData);
            if (!$actualExists)
            {
                return false;
            }
            $this->schedule = json_decode($actual->schedule);
        }

        $this->sanitizeSchedule($this->refSchedule);
        $this->sanitizeSchedule($this->schedule);

        // Function called from controller
        if (!empty($actual->id))
        {
            $this->_db->transactionStart();
        }

        $referenceDate = $reference->creationdate;
        $reference->set('schedule', json_encode($this->refSchedule));
        $reference->set('active', 0);
        $refSuccess = $reference->store();
        if (!$refSuccess)
        {
            // Function called from controller
            if (!empty($actual->id))
            {
                $this->_db->transactionRollback();
            }
            return false;
        }
        unset($reference);

        $this->schedule->referencedate = $referenceDate;
        $this->setLessonReference($this->schedule->lessons, $this->refSchedule->lessons);
        $this->setCalendarReference($this->schedule->calendar, $this->refSchedule->calendar);

        // Function called from controller
        if (!empty($actual->id))
        {
            $actual->set('schedule', json_encode($this->schedule));
            $actualSuccess = $actual->store();
            if (!$actualSuccess)
            {
                $this->_db->transactionRollback();
                return false;
            }

            $this->_db->transactionCommit();
        }
        return true;
    }

    /**
     * Sets the schedule to be referenced against
     *
     * @return  mixed  object if successful, otherwise null
     */
    private function getReferenceSchedule()
    {
        $reference = JTable::getInstance('schedules', 'thm_organizerTable');
        $referenceIDs = JFactory::getApplication()->input->get('cid', array(), 'array');

        // Entry by upload of new schedule
        if (empty($referenceIDs))
        {
            if (empty($this->schedule))
            {
                return null;
            }
            if (!empty($this->schedule))
            {
                $pullData = array();
                $pullData['departmentname'] = $this->schedule->departmentname;
                $pullData['semestername'] = $this->schedule->semestername;
                $pullData['startdate'] = $this->schedule->startdate;
                $pullData['enddate'] = $this->schedule->enddate;
                $pullData['active'] = 1;
            }
        }
        // Entry through schedule manager
        else
        {
            $pullData = $referenceIDs[0];
        }
        $referenceLoaded = $reference->load($pullData);

        if ($referenceLoaded)
        {
            return $reference;
        }

        return null;
    }

    /**
     * Activates the selected schedule
     *
     * @return  true on success, otherwise false
     */
    public function activate()
    {
        $scheduleRow = JTable::getInstance('schedules', 'thm_organizerTable');
        $scheduleIDs = JFactory::getApplication()->input->get('cid', array(), 'array');
        if (empty($scheduleIDs))
        {
            return true;
        }
        $scheduleExists = $scheduleRow->load($scheduleIDs[0]);
        if (!$scheduleExists)
        {
            return true;
        }

        $schedule = json_decode($scheduleRow->schedule);
        $this->sanitizeSchedule($schedule);
        $scheduleRow->schedule = json_encode($schedule);
        $scheduleRow->active = 1;

        $this->_db->transactionStart();

        $zeroQuery = $this->_db->getQuery(true);
        $zeroQuery->update('#__thm_organizerschedules');
        $zeroQuery->set("active = '0'");
        $zeroQuery->where("departmentname = '$scheduleRow->departmentname'");
        $zeroQuery->where("semestername = '$scheduleRow->semestername'");
        $this->_db->setQuery((string) $zeroQuery);
        try
        {
            $this->_db->Query();
        }
        catch (Exception $exception)
        {
            JFactory::getApplication()->enqueueMessage($exception->getMessage(), 'error');
            $this->_db->transactionRollback();
            return false;
        }
        $success = $scheduleRow->store();
        if ($success)
        {
            $this->_db->transactionCommit();
            return true;
        }
        else
        {
            $this->_db->transactionRollback();
            return false;
        }
    }

    /**
     * removes delta information from a schedule
     *
     * @param   array  &$schedule  the currently active schedule
     *
     * @return void
     */
    public function sanitizeSchedule(&$schedule)
    {
        $this->sanitizeLessons($schedule->lessons);
        $this->sanitizeCalendar($schedule->calendar);
        if (isset($schedule->referencedate))
        {
            unset($schedule->referencedate);
        }
    }

    /**
     * removes delta information from a schedule
     *
     * @param   array  &$lessons  the currently active schedule lessons
     *
     * @return void
     */
    private function sanitizeLessons(&$lessons)
    {
        foreach ($lessons as $lessonKey => $lesson)
        {
            if (isset($lesson->delta))
            {
                switch ($lesson->delta)
                {
                    case 'new':
                        unset($lessons->$lessonKey->delta);
                    continue;
                    case 'removed':
                        unset($lessons->$lessonKey);
                    continue;
                    case 'changed':
                        $this->sanitizeLessonProperty($lessons->$lessonKey->subjects);
                        $this->sanitizeLessonProperty($lessons->$lessonKey->teachers);
                        $this->sanitizeLessonProperty($lessons->$lessonKey->pools);
                        unset($lessons->$lessonKey->delta);
                    continue;
                }
            }
        }
    }

    /**
     * sanitizes a given lesson property
     *
     * @param   array  &$property  the array holding information about the property
     *
     * @return void
     */
    private function sanitizeLessonProperty(&$property)
    {
        foreach ($property as $key => $value)
        {
            switch ($value)
            {
                case 'new':
                    $property->$key = '';
                continue;
                case '':
                continue;
                case 'removed':
                    unset($property->$key);
                continue;
            }
        }
    }

    /**
     * sanitizes the calendar array of delta information
     *
     * @param   array  &$calendar  the calendar data to be sanitized
     *
     * @return void
     */
    private function sanitizeCalendar(&$calendar)
    {
        foreach ($calendar as $date => $periods)
        {
            if (!is_object($calendar->$date) OR empty($periods))
            {
                continue;
            }
            foreach ($periods as $period => $lessons)
            {
                if (empty($lessons))
                {
                    continue;
                }
                foreach ($lessons as $lesson => $rooms)
                {
                    if (empty($calendar->$date->$period->$lesson->delta))
                    {
                        continue;
                    }
                    switch ($calendar->$date->$period->$lesson->delta)
                    {
                        case 'new':
                            unset($calendar->$date->$period->$lesson->delta);
                            break;
                        case 'removed':
                            unset($calendar->$date->$period->$lesson);
                            break;
                        case 'changed':
                            foreach ($rooms as $roomID => $delta)
                            {
                                if ($roomID == 'delta')
                                {
                                    continue;
                                }
                                switch ($delta)
                                {
                                    case 'new':
                                        $calendar->$date->$period->$lesson->$roomID = '';
                                    continue;
                                    case '':
                                    continue;
                                    case 'removed':
                                        unset($calendar->$date->$period->$lesson->$roomID);
                                    continue;
                                }
                            }
                            unset($calendar->$date->$period->$lesson->delta);
                            break;
                    }
                }
            }
        }
    }

    /**
     * Examines the lessons of the new and old schedules to determine the delta
     *
     * @param   array  $lessons     the lessons of the new schedule
     * @param   array  $refLessons  the lessons of the old schedule
     *
     * @return void
     */
    private function setLessonReference($lessons, $refLessons)
    {
        // Check for new lesson data
        foreach ($lessons as $lessonID => $lesson)
        {
            // Lesson only exists in the new schedule
            if (!isset($refLessons->$lessonID))
            {
                $lessons->$lessonID->delta = 'new';
                continue;
            }

            // Lesson exists in both schedules -> compare properties
            $subjectChanges = $this->setPropertyReference($lessons->$lessonID->subjects, $refLessons->$lessonID->subjects);
            $teacherChanges = $this->setPropertyReference($lessons->$lessonID->teachers, $refLessons->$lessonID->teachers);
            $moduleChanges = $this->setPropertyReference($lessons->$lessonID->pools, $refLessons->$lessonID->pools);

            // Property indexes are not identical
            if ($subjectChanges or $teacherChanges or $moduleChanges)
            {
                $lessons->$lessonID->delta = 'changed';
            }
        }

        // Check for old lesson data
        foreach ($refLessons as $lessonID => $lesson)
        {
            // Lesson only exists in old schedule
            if (!isset($lessons->$lessonID))
            {
                $lessons->$lessonID = $refLessons->$lessonID;
                $lessons->$lessonID->delta = 'removed';
                continue;
            }
        }
    }

    /**
     * examines a property of both schedules and creates a delta according to
     * property indexes
     *
     * @param   array  &$property     the property of the new lesson to be examined
     * @param   array  &$refProperty  the property of the old lesson to be examined
     *
     * @return boolean $changesExist true if a property index is not in both sets
     */
    private function setPropertyReference(&$property, &$refProperty)
    {
        $changesExist = false;
        foreach ($property as $propertyID => $delta)
        {
            if (!isset($refProperty->$propertyID))
            {
                $property->$propertyID = 'new';
                $changesExist = true;
                continue;
            }
        }
        foreach ($refProperty as $propertyID => $delta)
        {
            if (!isset($property->$propertyID))
            {
                $property->$propertyID = 'removed';
                $changesExist = true;
                continue;
            }
        }
        return $changesExist;
    }

    /**
     * Examines the calendars of the actual and the reference schedules to
     * determine changes
     *
     * @param   object  &$calendar     the calendar of the actual schedule
     * @param   object  &$refCalendar  the calendar of the reference schedule
     *
     * @return void
     */
    private function setCalendarReference(&$calendar, &$refCalendar)
    {
        foreach ($calendar as $date => $periods)
        {
            if (!is_object($calendar->$date) OR empty($periods))
            {
                continue;
            }
            foreach ($periods as $period => $lessons)
            {
                if (empty($lessons))
                {
                    continue;
                }
                foreach ($lessons as $lessonID => $rooms)
                {
                    if (!isset($refCalendar->$date->$period->$lessonID))
                    {
                        $calendar->$date->$period->$lessonID->delta = 'new';
                        continue;
                    }
                    else
                    {
                        foreach ($rooms as $roomID => $delta)
                        {
                            if ($roomID == 'delta' or empty($roomID))
                            {
                                continue;
                            }
                            if (!isset($refCalendar->$date->$period->$lessonID->$roomID))
                            {
                                $calendar->$date->$period->$lessonID->$roomID = 'new';
                                $calendar->$date->$period->$lessonID->delta = 'changed';
                                continue;
                            }
                        }
                    }
                }
            }
        }

        foreach ($refCalendar as $date => $periods)
        {
            if (!is_object($calendar->$date) OR empty($periods))
            {
                continue;
            }
            foreach ($periods as $period => $lessons)
            {
                if (empty($lessons))
                {
                    continue;
                }
                foreach ($lessons as $lessonID => $rooms)
                {
                    if (!isset($calendar->$date->$period->$lessonID))
                    {
                        $calendar->$date->$period->$lessonID = new stdClass;
                        foreach ($rooms as $roomID => $delta)
                        {
                            $calendar->$date->$period->$lessonID->$roomID = '';
                        }
                        $calendar->$date->$period->$lessonID->delta = 'removed';
                        continue;
                    }
                    foreach ($rooms as $roomID => $delta)
                    {
                        if ($roomID == 'delta')
                        {
                            continue;
                        }
                        if (!isset($calendar->$date->$period->$lessonID->$roomID))
                        {
                            $calendar->$date->$period->$lessonID->$roomID = 'removed';
                            $calendar->$date->$period->$lessonID->delta = 'changed';
                            continue;
                        }
                    }
                }
            }
        }
    }

    /**
     * Checks whether the selected schedules pass the merge constraints:
     * 0 Error
     * 1 Constraints Passed
     * 2 Only one schedule selected
     * 3 Not all schedules differ in department
     * 4 Not all schedule dates are the same
     * 5 Not all schedules are active
     *
     * @return  integer
     */
    public function checkMergeConstraints()
    {
        $scheduleIDs = JFactory::getApplication()->input->get('cid', array(), 'array');
        if (empty($scheduleIDs) OR count($scheduleIDs) < 2)
        {
            return TOO_FEW;
        }
        $whereIDs = "'" . implode("', '", $scheduleIDs) . "'";

        $query = $this->_db->getQuery(true);
        $query->select('departmentname, active, startdate, enddate');
        $query->from('#__thm_organizer_schedules');
        $query->where("id IN ( $whereIDs )");
        $this->_db->setQuery((string) $query);
        
        try 
        {
            $schedules = $this->_db->loadAssocList();
        }
        catch (Exception $exc)
        {
            JFactory::getApplication()->enqueueMessage($exc->getMessage(), 'error');
            return ERROR;
        }

        $departments = array();
        $startdate = $schedules[0]['startdate'];
        $enddate = $schedules[0]['enddate'];

        foreach ($schedules as $schedule)
        {
            if ($schedule['active'] == 0)
            {
                return NOT_ACTIVE;
            }
            if ($schedule['startdate'] != $startdate OR $schedule['enddate'] != $enddate)
            {
                return CHECK_DATES;
            }
            if (in_array($schedule['departmentname'], $departments))
            {
                return CHECK_DEPARTMENTS;
            }
            else
            {
                $departments[] = $schedule['departmentname'];
            }
        }
        return MERGE;
    }

    /**
     * Merges the chosen schedules into a new schedule
     *
     * @return  int  a value which stands for different statuses
     */
    public function merge()
    {
        $checkedIDs = JFactory::getApplication()->input->post->get('schedules', array(), 'array');
        if (empty($checkedIDs) OR count($checkedIDs) < 2)
        {
            return TOO_FEW;
        }
        $scheduleIDs = "'" . implode("', '", $checkedIDs) . "'";

        $input = JFactory::getApplication()->input;
        $newScheduleRow = array();
        $newScheduleRow['creationdate'] = date('Y-m-d');
        $newScheduleRow['creationtime'] = date('is');
        $newScheduleRow['departmentname'] = $input->getString('departmentname', '');
        $newScheduleRow['semestername'] = $input->getString('semestername', '');

        $invalid = (empty($newScheduleRow['departmentname']) OR empty($newScheduleRow['semestername']));
        if ($invalid)
        {
            return ERROR;
        }

        $query = $this->_db->getQuery(true);
        $query->select('schedule');
        $query->from('#__thm_organizer_schedules');
        $query->where("id IN ( $scheduleIDs )");
        $this->_db->setQuery((string) $query);
        
        try 
        {
            $schedules = $this->_db->loadColumn();
        }
        catch (Exception $exc)
        {
            JFactory::getApplication()->enqueueMessage($exc->getMessage(), 'error');
            return ERROR;
        }

        foreach ($schedules as $key => $value)
        {
            $schedules[$key] = json_decode($value);
        }

        $baseSchedule = $schedules[0];
        for ($index = 1; $index < count($schedules); $index++)
        {
            $this->mergeRecursive($baseSchedule, $schedules[$index]);
        }

        $baseSchedule->creationdate = date('Y-m-d');
        $baseSchedule->creationtime = date('Hiu');
        $baseSchedule->departmentname = $newScheduleRow['departmentname'];
        $baseSchedule->semestername = $newScheduleRow['semestername'];
        $newScheduleRow['startdate'] = $baseSchedule->startdate;
        $newScheduleRow['enddate'] = $baseSchedule->enddate;
        $newScheduleRow['active'] = 1;
        $newScheduleRow['schedule'] = json_encode($baseSchedule);

        $table = JTable::getInstance('schedules', 'thm_organizerTable');
        $success = $table->save($newScheduleRow);
        if ($success)
        {
            return MERGE;
        }
        else
        {
            return ERROR;
        }
    }

    /**
     * Attempts to recursively merge two schedule objects
     *
     * @param   object  &$thingOne  the first object
     * @param   object  &$thingTwo  the second object
     *
     * @return  void
     */
    private function mergeRecursive(&$thingOne, &$thingTwo)
    {
        foreach ($thingTwo as $property => $value)
        {
            if (!isset($thingOne->$property))
            {
                $thingOne->$property = $value;
            }
            elseif ($thingOne->$property !== $thingTwo->$property)
            {
                if (is_string($thingOne->$property) AND is_string($thingTwo->$property))
                {
                    $thingOne->$property = $thingTwo->$property;
                }
                if (is_object($thingOne->$property) AND is_object($thingTwo->$property) AND $thingTwo->$property != null)
                {
                    $this->mergeRecursive($thingOne->$property, $thingTwo->$property);
                }
            }
        }
    }

    /**
     * Persists the schedule to be uploaded
     *
     * @return  mixed  integer scheduleID on success, otherwise false
     */
    private function saveSchedule()
    {
        $data = array();
        $data['departmentname'] = $this->schedule->departmentname;
        $data['semestername'] = $this->schedule->semestername;
        $data['creationdate'] = $this->schedule->creationdate;
        $data['creationtime'] = $this->schedule->creationtime;
        $formData = JFactory::getApplication()->input->get('jform', array(), 'array');
        $data['description'] = $this->_db->escape($formData['description']);
        $data['schedule'] = json_encode($this->schedule);
        $data['startdate'] = $this->schedule->startdate;
        $data['enddate'] = $this->schedule->enddate;
        $data['active'] = 1;

        $row = JTable::getInstance('schedules', 'thm_organizerTable');
        $row->save($data);
        return $row->id;
    }

    /**
     * Saves the comment for an uploaded schedule
     *
     * @return boolean true on success otherwise false
     */
    public function saveComment()
    {
        $data = JFactory::getApplication()->input->get('jform', array(), 'array');
        $data['description'] = $this->_db->escape($data['description']);
        unset($data->startdate, $data->enddate, $data->creationdate);
        $table = JTable::getInstance('schedules', 'thm_organizerTable');
        return $table->save($data);
    }

    /**
     * Checks if the first selected schedule is active
     *
     * @return boolean true if the schedule is active otherwise false
     */
    public function checkIfActive()
    {
        $scheduleIDs = JFactory::getApplication()->input->get('cid', array(), 'array');
        if (!empty($scheduleIDs))
        {
            $scheduleID = $scheduleIDs[0];
            $schedule = JTable::getInstance('schedules', 'thm_organizerTable');
            $schedule->load($scheduleID);
            return $schedule->active;
        }
        return false;
    }

    /**
     * Deletes the selected schedules
     *
     * @return boolean true on successful deletion of all selected schedules
     *                 otherwise false
     */
    public function delete()
    {
        $this->_db->transactionStart();
        $scheduleIDs = JFactory::getApplication()->input->get('cid', array(), 'array');
        foreach ($scheduleIDs as $scheduleID)
        {
            try
            {
                $success = $this->deleteSingle($scheduleID);
            }
            catch (Exception $exception)
            {
                JFactory::getApplication()->enqueueMessage($exception->getMessage(), 'error');
                $this->_db->transactionRollback();
                return false;
            }
            if (!$success)
            {
                $this->_db->transactionRollback();
                return false;
            }
        }
        $this->_db->transactionCommit();
        return true;
    }

    /**
     * Deletes a single schedule
     *
     * @param   int  $scheduleID  the id of the schedule to be deleted
     *
     * @return boolean true on success otherwise false
     */
    public function deleteSingle($scheduleID)
    {
        $schedule = JTable::getInstance('schedules', 'thm_organizerTable');
        $schedule->load($scheduleID);
        return $schedule->delete();
    }
}
