<?php
/**
 * @category    Joomla component
 * @package     THM_Organizer
 * @subpackage  com_thm_organizer.admin
 * @name        THM_OrganizerModelSchedule
 * @author      James Antrim, <james.antrim@nm.thm.de>
 * @copyright   2016 TH Mittelhessen
 * @license     GNU GPL v.2
 * @link        www.thm.de
 */
defined('_JEXEC') or die;
JTable::addIncludePath(JPATH_BASE . '/administrator/components/com_thm_organizer/tables');
/** @noinspection PhpIncludeInspection */
require_once JPATH_ROOT . '/media/com_thm_organizer/helpers/xml/schedule.php';
require_once JPATH_ROOT . '/media/com_thm_organizer/helpers/json/schedule.php';
require_once JPATH_ROOT . '/media/com_thm_organizer/helpers/json/old_schedule.php';

/**
 * Class enapsulating data abstraction and business logic for xml schedules
 * generated by Untis software.
 *
 * @category    Joomla.Component.Admin
 * @package     thm_organizer
 * @subpackage  com_thm_organizer.admin
 */
class THM_OrganizerModelSchedule extends JModelLegacy
{
	/**
	 * Object containing information from the actual schedule
	 *
	 * @var object
	 */
	public $schedule = null;

	/**
	 * Object containing information from a reference schedule
	 *
	 * @var object
	 */
	public $refSchedule = null;

	/**
	 * Activates the selected schedule
	 *
	 * @param   int $scheduleID the explicit id of the schedule to activate
	 *
	 * @return  true on success, otherwise false
	 */
	public function activate($scheduleID = 0)
	{
		$scheduleRow = JTable::getInstance('schedules', 'thm_organizerTable');
		if (empty($scheduleID))
		{
			$scheduleIDs = JFactory::getApplication()->input->get('cid', array(), 'array');
			if (empty($scheduleIDs))
			{
				return true;
			}

			$scheduleID = $scheduleIDs[0];
		}

		$scheduleExists = $scheduleRow->load($scheduleID);
		if (!$scheduleExists)
		{
			return true;
		}

		$schedule = json_decode($scheduleRow->schedule);
		$this->sanitizeSchedule($schedule);
		$scheduleRow->schedule = json_encode($schedule);
		$scheduleRow->active   = 1;

		$this->_db->transactionStart();

		$zeroQuery = $this->_db->getQuery(true);
		$zeroQuery->update('#__thm_organizer_schedules');
		$zeroQuery->set("active = '0'");
		$zeroQuery->where("plan_name = '$scheduleRow->plan_name'");
		$this->_db->setQuery((string) $zeroQuery);
		try
		{
			$this->_db->execute();
		}
		catch (Exception $exception)
		{
			JFactory::getApplication()->enqueueMessage(JText::_("COM_THM_ORGANIZER_MESSAGE_DATABASE_ERROR"), 'error');
			$this->_db->transactionRollback();

			return false;
		}

		$success = $scheduleRow->store();
		if ($success)
		{
			$this->_db->transactionCommit();

			return true;
		}
		else
		{
			$this->_db->transactionRollback();

			return false;
		}
	}

	/**
	 * Checks if the first selected schedule is active
	 *
	 * @return boolean true if the schedule is active otherwise false
	 */
	public function checkIfActive()
	{
		$scheduleIDs = JFactory::getApplication()->input->get('cid', array(), 'array');
		if (!empty($scheduleIDs))
		{
			$scheduleID = $scheduleIDs[0];
			$schedule   = JTable::getInstance('schedules', 'thm_organizerTable');
			$schedule->load($scheduleID);

			return $schedule->active;
		}

		return false;
	}

	/**
	 * Activates the selected schedule
	 *
	 * @param   int $scheduleID the explicit id of the schedule to activate
	 *
	 * @return  true on success, otherwise false
	 */
	public function deactivate($scheduleID)
	{
		if (empty($scheduleID))
		{
			return false;
		}

		$scheduleRow    = JTable::getInstance('schedules', 'thm_organizerTable');
		$scheduleExists = $scheduleRow->load($scheduleID);
		if (!$scheduleExists)
		{
			return false;
		}

		$this->_db->transactionStart();
		$scheduleRow->active = 0;
		$success             = $scheduleRow->store();
		if ($success)
		{
			$this->_db->transactionCommit();

			return true;
		}
		else
		{
			$this->_db->transactionRollback();

			return false;
		}
	}

	/**
	 * Deletes the selected schedules
	 *
	 * @return boolean true on successful deletion of all selected schedules
	 *                 otherwise false
	 */
	public function delete()
	{
		$this->_db->transactionStart();
		$scheduleIDs = JFactory::getApplication()->input->get('cid', array(), 'array');
		foreach ($scheduleIDs as $scheduleID)
		{
			try
			{
				$success = $this->deleteSingle($scheduleID);
			}
			catch (Exception $exception)
			{
				JFactory::getApplication()->enqueueMessage(JText::_("COM_THM_ORGANIZER_MESSAGE_DATABASE_ERROR"), 'error');
				$this->_db->transactionRollback();

				return false;
			}

			if (!$success)
			{
				$this->_db->transactionRollback();

				return false;
			}
		}
		$this->_db->transactionCommit();

		return true;
	}

	/**
	 * Deletes a single schedule
	 *
	 * @param   int $scheduleID the id of the schedule to be deleted
	 *
	 * @return boolean true on success otherwise false
	 */
	public function deleteSingle($scheduleID)
	{
		$schedule = JTable::getInstance('schedules', 'thm_organizerTable');
		$schedule->load($scheduleID);

		return $schedule->delete();
	}

	/**
	 * Gets a schedule row for referencing. Implicitly migrating as necessary
	 *
	 * @param int $departmentID     the department id of the reference row
	 * @param int $planningPeriodID the planning period id of the reference row
	 *
	 * @return  mixed  object if successful, otherwise null
	 */
	private function getScheduleRow($departmentID = null, $planningPeriodID = null)
	{
		$scheduleRow = JTable::getInstance('schedules', 'thm_organizerTable');

		// Reference schedule row
		if (empty($departmentID) OR empty($planningPeriodID))
		{
			$referenceIDs = JFactory::getApplication()->input->get('cid', array(), 'array');

			// Called implicitly from within the class
			if (empty($referenceIDs))
			{
				if (empty($this->schedule))
				{
					return null;
				}

				$pullData = array(
					'departmentID'     => $this->schedule->departmentID,
					'planningPeriodID' => $this->schedule->planningPeriodID,
					'active'           => 1
				);
			}

			// Called explicitly from the schedule manager view
			else
			{
				$pullData = $referenceIDs[0];
			}
		}

		// Active schedule row
		else
		{
			$pullData = array(
				'departmentID'     => $departmentID,
				'planningPeriodID' => $planningPeriodID,
				'active'           => 1
			);
		}

		$exists = $scheduleRow->load($pullData);

		if (!$exists)
		{
			return null;
		}

		if (empty($scheduleRow->newSchedule))
		{
			$migrated = $this->migrate($scheduleRow->id);

			if (!$migrated)
			{
				return null;
			}

			// Ensures that the changes performed during the migration process are loaded.
			$scheduleRow->load($scheduleRow->id);
		}

		return $scheduleRow;
	}

	/**
	 * Migrates an existing deprecated format schedule to a schedule with the new format
	 *
	 * @return   array  $statusReport  ['scheduleID']  true on save, false on db error
	 *                                 ['errors']      critical data inconsistencies
	 *                                 ['warnings']    minor data inconsistencies
	 */
	public function migrate($scheduleID = null)
	{
		// Called directly by user
		if (empty($scheduleID))
		{
			$input       = JFactory::getApplication()->input;
			$scheduleIDs = $input->get('cid', array(), 'array');

			if (empty($scheduleIDs))
			{
				$scheduleID = $input->getInt('id');
				if (empty($scheduleID))
				{
					return false;
				}
				$scheduleIDs = array($scheduleID);
			}
		}

		// Called implicitly in the class
		else
		{
			$scheduleIDs = array($scheduleID);
		}

		foreach ($scheduleIDs as $scheduleID)
		{
			$jsonModel = new THM_OrganizerModelJSONSchedule;
			$success   = $jsonModel->migrate($scheduleID);

			// End on first fail
			if (!$success)
			{
				return false;
			}
		}

		// TODO: Add explicit joomla messages

		return true;
	}

	/**
	 * Persists the schedule to be uploaded
	 *
	 * @return  bool  true on success, otherwise false
	 */
	private function saveSchedule()
	{
		$formData = JFactory::getApplication()->input->get('jform', array(), 'array');

		$data                     = array();
		$data['departmentID']     = $formData['departmentID'];
		$departmentName           = $this->schedule->departmentname;
		$semesterName             = $this->schedule->semestername;
		$data['departmentname']   = $departmentName;
		$data['semestername']     = $semesterName;
		$data['planningPeriodID'] = $this->schedule->planningPeriodID;
		$data['creationdate']     = $this->schedule->creationdate;
		$data['creationtime']     = $this->schedule->creationtime;
		$data['schedule']         = json_encode($this->schedule);
		$data['startDate']        = $this->schedule->startDate;
		$data['endDate']          = $this->schedule->endDate;
		$data['active']           = 1;

		$row = JTable::getInstance('schedules', 'thm_organizerTable');

		try
		{
			return $row->save($data);
		}
		catch (Exception $exc)
		{
			JFactory::getApplication()->enqueueMessage(JText::_("COM_THM_ORGANIZER_MESSAGE_DATABASE_ERROR"), 'error');

			return false;
		}
	}

	/**
	 * Creates the delta to the chosen reference schedule
	 *
	 * @return boolean true on successful delta creation, otherwise false
	 */
	public function setReference()
	{
		$reference = $this->getScheduleRow();
		if (empty($reference) OR empty($reference->id))
		{
			return true;
		}

		$active = $this->getScheduleRow($reference->departmentID, $reference->planningPeriodID);
		if (empty($active) OR empty($active->id))
		{
			return true;
		}

		$oldJsonModel  = new THM_OrganizerModelOldJSONSchedule;
		$oldRefSuccess = $oldJsonModel->seReference($reference, $active);

		if (!$oldRefSuccess)
		{
			return false;
		}

		// Free up memory
		unset($oldJsonModel);

		$jsonModel  = new THM_OrganizerModelJSONSchedule;
		$refSuccess = $jsonModel->setReference($reference, $active);


		return true;
	}

	/**
	 * Toggles the schedule's active status
	 *
	 * @return  boolean  true on success, otherwise false
	 */
	public function toggle()
	{
		$input      = JFactory::getApplication()->input;
		$scheduleID = $input->getInt('id', 0);
		if (empty($scheduleID))
		{
			return false;
		}

		$value = $input->getInt('value', 1);
		if ($value)
		{
			return $this->deactivate($scheduleID);
		}

		return $this->activate($scheduleID);
	}

	/**
	 * saves a schedule in the database for later use
	 *
	 * @return   array  $statusReport  ['scheduleID']  true on save, false on db error
	 *                                 ['errors']      critical data inconsistencies
	 *                                 ['warnings']    minor data inconsistencies
	 */
	public function upload()
	{
		$xmlModel = new THM_OrganizerModelXMLSchedule();
		$valid    = $xmlModel->validate();

		if (!$valid)
		{
			return false;
		}

		$this->schedule = $xmlModel->schedule;
		$this->setReference();
		$this->_db->transactionStart();

		try
		{
			$success = $this->saveSchedule();
		}
		catch (Exception $exception)
		{
			JFactory::getApplication()->enqueueMessage($exception->getMessage(), 'error');
			$this->_db->transactionRollback();
		}

		if ($success)
		{
			$this->_db->transactionCommit();

			return true;
		}

		return false;
	}
}
