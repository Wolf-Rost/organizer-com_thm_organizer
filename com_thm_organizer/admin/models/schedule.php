<?php
/**
 *@category    component
 * 
 *@package     THM_Organizer
 * 
 *@subpackage  com_thm_organizer
 *@name        data abstraction and business logic class for xml schedules
 *@author      James Antrim jamesDOTantrimATmniDOTthmDOTde
 * 
 *@copyright   2012 TH Mittelhessen
 * 
 *@license     GNU GPL v.2
 *@link        www.mni.thm.de
 *@version     0.1.0
 */
defined('_JEXEC') or die;
jimport('joomla.application.component.model');
/**
 * Class enapsulating data abstraction and business logic for xml schedules
 * generated by Untis software. 
 * 
 * @package  Admin
 * 
 * @since    2.5.4
 *  */
class thm_organizersModelschedule extends JModel
{
    /**
     * Array to hold error strings relating to critical data inconsistencies
     * 
     * @var array
     */
    private $_scheduleErrors = null;

    /**
     * Array to hold warning strings relating to minor data inconsistencies
     * 
     * @var array
     */
    private $_scheduleWarnings = null;

    /**
     * Array containing information from the uploaded schedule
     * 
     * @var array 
     */
    private $_newSchedule = null;

    /**
     * Array containing information from a previous schedule version
     * 
     * @var array 
     */
    private $_oldSchedule = null;

    /**
     * saves a schedule in the database for later use
     *
     * @return   array  $status  ['success']    true on save, false on db error
     *                           ['schedule']   the schedule data coded in json
     *                           ['errors']     critical data inconsistencies
     *                           ['warnings']   minor data inconsistencies 
     */
    public function upload()
    {
        $this->validate();
        $statusReport = $this->makeStatusReport();

        if (!empty($this->_scheduleErrors))
        {
            return $statusReport;
        }

        $dbo = JFactory::getDbo();
        $dbo->transactionStart();
        $this->saveFields();
        $this->saveTeachers();
        $this->saveRoomTypes();
        $this->saveRooms();
        $this->createDelta();
        $statusReport['scheduleID'] = $this->saveSchedule();
        if ($dbo->getErrorMsg())
        {
            $dbo->transactionRollback();
        }
        else
        {
            $dbo->transactionCommit();
        }

        return $statusReport;
    }

    /**
     * checks a given schedule in gp-untis xml format for data completeness and
     * consistency and gives it basic structure
     *
     * @return $status array of strings listing inconsistancies empty if none
     *          were found
     */
    public function validate()
    {
        $xmlSchedule = simplexml_load_file($_FILES['file']['tmp_name']);
        $this->_newSchedule = array();
        $this->_scheduleErrors      = array();
        $this->_scheduleWarnings    = array();

        // General node
        // Creation Date & Time
        $creationDate = trim((string) $xmlSchedule[0]['date']);
        if (empty($creationDate))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_CREATION_DATE_MISSING");
        }
        else
        {
            $this->_newSchedule['creationdate'] = substr($creationDate, 0, 4) . '-' . substr($creationDate, 4, 2) . '-' . substr($creationDate, 6, 2);
        }
        $creationTime = trim((string) $xmlSchedule[0]['date']);
        if (empty($creationTime))
        {
            $this->_scheduleWarnings[] = JText::_("COM_THM_ORGANIZER_SCH_CREATION_TIME_MISSING");
        }
        else
        {
            $this->_newSchedule['creationtime'] = $creationTime;
        }

        // Schoolyear dates
        $syStartDate = trim((string) $xmlSchedule->general->schoolyearbegindate);
        if (empty($syStartDate))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_START_DATE_MISSING");
        }
        else
        {
            $syStartDate = substr($syStartDate, 0, 4) . '-' . substr($syStartDate, 4, 2) . '-' . substr($syStartDate, 6, 2);
        }
        $syEndDate = trim((string) $xmlSchedule->general->schoolyearenddate);
        if (empty($syEndDate))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_END_DATE_MISSING");
        }
        else
        {
            $syEndDate = substr($syEndDate, 0, 4) . '-' . substr($syEndDate, 4, 2) . '-' . substr($syEndDate, 6, 2);
        }

        // Organizational Data
        $departmentname = trim((string) $xmlSchedule->general->header1);
        if (empty($departmentname))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_ORGANIZATION_MISSING");
        }
        else
        {
            $this->_newSchedule['departmentname'] = $departmentname;
        }
        $semestername = trim((string) $xmlSchedule->general->header2);
        if (empty($semestername))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_SCHOOLYEARNAME_MISSING");
        }
        else
        {
            $this->_newSchedule['semestername'] = $semestername;
        }

        // Term Start & Enddates
        $startDate = trim((string) $xmlSchedule->general->termbegindate);
        if (empty($startDate))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_START_DATE_MISSING");
        }
        else
        {
            $this->_newSchedule['startdate'] = substr($startDate, 0, 4) . '-' . substr($startDate, 4, 2) . '-' . substr($startDate, 6, 2);
        }
        $endDate = trim((string) $xmlSchedule->general->termenddate);
        if (empty($endDate))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_END_DATE_MISSING");
        }
        else
        {
            $this->_newSchedule['enddate'] = substr($endDate, 0, 4) . '-' . substr($endDate, 4, 2) . '-' . substr($endDate, 6, 2);
        }

        // Checks if term and schoolyear dates are consistent
        $syStartDate = strtotime($syStartDate);
        $syEndDate = strtotime($syEndDate);
        $termStartDT = strtotime($this->_newSchedule['startdate']);
        $termEndDT = strtotime($this->_newSchedule['enddate']);
        if ($termStartDT < $syStartDate OR $termEndDT > $syEndDate OR $termStartDT >= $termEndDT)
        {
            $this->_scheduleErrors[] = "$termStartDT < $syStartDate OR $termEndDT > $syEndDate OR $termStartDT >= $termEndDT";
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_SCH_DATES_INCONSISTANT');
        }

        $this->_newSchedule['periods'] = array();
        if (empty($xmlSchedule->timeperiods))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_TP_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->timeperiods->children() as $periodnode)
            {
                $this->validatePeriod($periodnode);
            }
        }

        $this->_newSchedule['descriptions'] = array();
        if (empty($xmlSchedule->descriptions))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_DSM_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->descriptions->children() as $descriptionnode)
            {
                $this->validateDescription($descriptionnode);
            }
        }

        // Departments node holds degree names
        $this->_newSchedule['degrees'] = array();
        if (empty($xmlSchedule->departments))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_DP_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->departments->children() as $departmentnode)
            {
                $this->validateDegree($departmentnode);
            }
        }

        $this->_newSchedule['rooms'] = array();
        if (empty($xmlSchedule->rooms))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_RM_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->rooms->children() as $roomnode)
            {
                $this->validateRoom($roomnode);
            }
        }

        $this->_newSchedule['subjects'] = array();
        if (empty($xmlSchedule->subjects))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SU_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->subjects->children() as $subjectnode)
            {
                $this->validateSubject($subjectnode);
            }
        }

        $this->_newSchedule['teachers'] = array();
        if (empty($xmlSchedule->teachers))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_TR_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->teachers->children() as $teachernode)
            {
                $this->validateTeacher($teachernode);
            }
        }

        // Classes node holds information about modules
        $this->_newSchedule['modules'] = array();
        if (empty($xmlSchedule->classes))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_CL_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->classes->children() as $classnode)
            {
                $this->validateModule($classnode);
            }
        }

        $this->initializeCalendar($syStartDate, $syEndDate);
        $this->_newSchedule['lessons'] = array();
        if (empty($xmlSchedule->lessons))
        {
            $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_LS_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->lessons->children() as $lessonnode)
            {
                $this->validateLesson($lessonnode);
            }
        }

        $status = $this->makeStatusReport();
        if (empty($this->_scheduleErrors))
        {
            $this->sortRoomTypes();
            $this->sortFields();
            /* $this->sortLessonTypes(); */
            unset($this->_newSchedule['descriptions']);
        }
        return $status;
    }

    /**
     * validates an individual period
     *
     * @param   SimpleXMLNode  &$periodnode  a resource node
     * 
     * @return void
     */
    protected function validatePeriod(&$periodnode)
    {
        $gpuntisID = trim((string) $periodnode[0]['id']);
        $periodID = str_replace('TP_', '', $gpuntisID);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_TP_ID_MISSING"), $this->_scheduleErrors))
            {
                $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_TP_ID_MISSING");
            }
            return;
        }
        $this->_newSchedule['periods'][$periodID] = array();
        $this->_newSchedule['periods'][$periodID]['gpuntisID'] = $gpuntisID;

        $day = (int) $periodnode->day;
        if (empty($day))
        {
            $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_TP_DAY_MISSING", $id);
            continue;
        }
        else
        {
            $this->_newSchedule['periods'][$periodID]['day'] = $day;
        }

        $period = (int) $periodnode->period;
        if (empty($period))
        {
            $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_TP_PERIOD_MISSING", $id);
            return;
        }
        else
        {
            $this->_newSchedule['periods'][$periodID]['period'] = $period;
        }

        $starttime = trim((string) $periodnode->starttime);
        if (empty($starttime))
        {
            $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_TP_STARTTIME_MISSING", $id);
        }
        else
        {
            $this->_newSchedule['periods'][$periodID]['starttime'] = $starttime;
        }

        $endtime = trim((string) $periodnode->endtime);
        if (empty($endtime))
        {
            $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_TP_ENDTIME_MISSING", $id);
        }
        else
        {
            $this->_newSchedule['periods'][$periodID]['endtime'] = $endtime;
        }
    }

    /**
     * checks whether department nodes have the expected structure and required
     * information
     *
     * @param   SimpleXMLNode  &$descriptionnode  the description node to be validated
     * 
     * @return void
     */
    private function validateDescription(&$descriptionnode)
    {
        $gpuntisID = trim((string) $descriptionnode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_DSM_ID_MISSING."), $this->_scheduleErrors))
            {
                    $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_DSM_ID_MISSING.");
            }
            return;
        }
        $descriptionID = str_replace('DS_', '', $gpuntisID);
        $this->_newSchedule['descriptions'][$descriptionID] = array();
        $this->_newSchedule['descriptions'][$descriptionID]['gpuntisID'] = $gpuntisID;

        $longname = trim((string) $descriptionnode->longname);
        if (empty($longname))
        {
            $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_DSM_DESC_MISSING", $descriptionID);
            return;
        }
        else
        {
            $this->_newSchedule['descriptions'][$descriptionID]['name'] = $longname;
        }
    }

    /**
     * checks whether department nodes have the expected structure and required
     * information
     *
     * @param   SimpleXMLNode  &$departmentnode  the department node to be validated
     * 
     * @return void
     */
    protected function validateDegree(&$departmentnode)
    {
        $gpuntisID = trim((string) $departmentnode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_DP_ID_MISSING"), $this->_scheduleErrors))
            {
                $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_DP_ID_MISSING");
            }
            return;
        }
        $degreeID = str_replace('DP_', '', $gpuntisID);
        $this->_newSchedule['degrees'][$degreeID] = array();
        $this->_newSchedule['degrees'][$degreeID]['gpuntisID'] = $gpuntisID;

        $degreeName = (string) $departmentnode->longname;
        if (!isset($degreeName))
        {
            $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_DP_LN_MISSING", $degreeID);
            return;
        }
        $this->_newSchedule['degrees'][$degreeID]['name'] = $degreeName;
    }

    /**
     * checks whether room nodes have the expected structure and required
     * information
     *
     * @param   SimpleXMLNode  &$roomnode  the room node to be validated
     * 
     * @return void
     */
    protected function validateRoom(&$roomnode)
    {
        $gpuntisID = trim((string) $roomnode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_RM_ID_MISSING"), $this->_scheduleErrors))
            {
                $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_RM_ID_MISSING");
            }
            return;
        }
        $roomID = str_replace('RM_', '', $gpuntisID);
        $this->_newSchedule['rooms'][$roomID] = array();
        $this->_newSchedule['rooms'][$roomID]['gpuntisID'] = $gpuntisID;
        $this->_newSchedule['rooms'][$roomID]['name'] = $roomID;

        $longname = trim((string) $roomnode->longname);
        if (empty($longname))
        {
            $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_RM_LN_MISSING", $roomID);
            return;
        }
        else
        {
            $this->_newSchedule['rooms'][$roomID]['longname'] = $longname;
        }
        $capacity = trim((int) $roomnode->capacity);
        if (!empty($capacity))
        {
            $this->_newSchedule['rooms'][$roomID]['capacity'] = $capacity;
        }
        $descriptionID = str_replace('DS_', '', trim((string) $roomnode->room_description[0]['id']));
        if (empty($descriptionID))
        {
            $this->_scheduleWarnings[] = JText::sprintf("COM_THM_ORGANIZER_RM_DESC_MISSING", $longname, $roomID);
            $this->_newSchedule['rooms'][$roomID]['description'] = '';
        }
        elseif (empty($this->_newSchedule['descriptions'][$descriptionID]))
        {
            $this->_scheduleWarnings[] = JText::sprintf("COM_THM_ORGANIZER_RM_DESC_MISSING", $longname, $roomID, $descriptionID);
            $this->_newSchedule['rooms'][$roomID]['description'] = '';
        }
        else
        {
            $this->_newSchedule['rooms'][$roomID]['description'] = $descriptionID;
        }
    }

    /**
     * checks whether subject nodes have the expected structure and required
     * information
     *
     * @param   SimpleXMLNode  &$subjectnode  the subject node to be validated
     * 
     * @return void
     */
    protected function validateSubject(&$subjectnode)
    {
        $gpuntisID = trim((string) $subjectnode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_SU_ID_MISSING"), $this->_scheduleErrors))
            {
                $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SU_ID_MISSING");
            }
            return;
        }
        $subjectID = str_replace('SU_', '', $gpuntisID);
        $this->_newSchedule['subjects'][$subjectID] = array();
        $this->_newSchedule['subjects'][$subjectID]['gpuntisID'] = $gpuntisID;
        $this->_newSchedule['subjects'][$subjectID]['name'] = $subjectID;

        $longname = trim((string) $subjectnode->longname);
        if (empty($longname))
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_SU_LN_MISSING', $subjectID);
            return;
        }
        else
        {
            $this->_newSchedule['subjects'][$subjectID]['longname'] = $longname;
        }

        $subjectNo = trim((string) $subjectnode->text);
        if (empty($subjectNo))
        {
            $this->_scheduleWarnings[] = JText::sprintf('COM_THM_ORGANIZER_SU_MN_MISSING', $subjectID, $longname);
        }
        else
        {
            $this->_newSchedule['subjects'][$subjectID]['subjectNo'] = $subjectNo;
        }

        $descriptionID = str_replace('DS_', '', trim($subjectnode->subject_description[0]['id']));
        if (empty($descriptionID))
        {
            $this->_scheduleWarnings[] = JText::sprintf('COM_THM_ORGANIZER_SU_AREA_MISSING', $subjectID, $longname);
        }
        elseif (empty($this->_newSchedule['descriptions'][$descriptionID]))
        {
            $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_SCH_SU_DESC_MISSING", $subjectID, $longname, $descriptionID);
            return;
        }
        else
        {
            $this->_newSchedule['subjects'][$subjectID]['description'] = $descriptionID;
        }
    }

    /**
     * checks whether teacher nodes have the expected structure and required
     * information
     *
     * @param   SimpleXMLNode  &$teachernode  the teacher node to be validated
     * 
     * @return void
     */
    protected function validateTeacher(&$teachernode)
    {
        $gpuntisID = trim((string) $teachernode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_TR_ID_MISSING"), $this->_scheduleErrors))
            {
                $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_TR_ID_MISSING");
            }
            return;
        }
        $teacherID = str_replace('TR_', '', $gpuntisID);
        $this->_newSchedule['teachers'][$teacherID] = array();
        $this->_newSchedule['teachers'][$teacherID]['gpuntisID'] = $gpuntisID;

        $surname = trim((string) $teachernode->surname);
        if (empty($surname))
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_TR_SN_MISSING', $teacherID);
            return;
        }
        $this->_newSchedule['teachers'][$teacherID]['surname'] = $surname;

        $firstname = trim((string) $teachernode->forename);
        if (empty($firstname))
        {
            $this->_scheduleWarnings[] = JText::sprintf('COM_THM_ORGANIZER_TR_FN_MISSING', $teacherID, $surname);
            $this->_newSchedule['teachers'][$teacherID]['firstname'] = '';
        }
        else
        {
            $this->_newSchedule['teachers'][$teacherID]['firstname'] = $firstname;
        }

        $userid = trim((string) $teachernode->payrollnumber);
        if (empty($userid))
        {
            $this->_scheduleWarnings[] = JText::sprintf("COM_THM_ORGANIZER_TR_PN_MISSING", $surname, $teacherID);
            $this->_newSchedule['teachers'][$teacherID]['username'] = '';
        }
        else
        {
            $this->_newSchedule['teachers'][$teacherID]['username'] = $userid;
        }

        $descriptionID = str_replace('DS_', '', trim($teachernode->teacher_description[0]['id']));
        if (empty($descriptionID))
        {
            $this->_scheduleWarnings[] = JText::sprintf("COM_THM_ORGANIZER_TR_DESC_MISSING", $surname, $teacherID);
            $this->_newSchedule['teachers'][$teacherID]['description'] = '';
        }
        elseif (empty($this->_newSchedule['descriptions'][$descriptionID]))
        {
            $this->_scheduleWarnings[] = JText::sprintf("COM_THM_ORGANIZER_TR_DESC_LACKING", "$surname ($teacherID) ", $descriptionID);
            $this->_newSchedule['teachers'][$teacherID]['description'] = '';
        }
        else
        {
            $this->_newSchedule['teachers'][$teacherID]['description'] = $descriptionID;
        }
    }

    /**
     * checks whether class nodes have the expected structure and required
     * information
     *
     * @param   SimpleXMLNode  &$classnode  the class node to be validated
     * 
     * @return void
     */
    protected function validateModule(&$classnode)
    {

        $gpuntisID = trim((string) $classnode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_CL_ID_MISSING"), $this->_scheduleErrors))
            {
                $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_CL_ID_MISSING");
            }
            return;
        }
        $moduleID = str_replace('CL_', '', $gpuntisID);
        $this->_newSchedule['modules'][$moduleID] = array();
        $this->_newSchedule['modules'][$moduleID]['gpuntisID'] = $gpuntisID;
        $this->_newSchedule['modules'][$moduleID]['name'] = $moduleID;

        $longname = trim((string) $classnode->longname);
        if (empty($longname))
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_CL_LN_MISSING', $moduleID);
            return;
        }
        $this->_newSchedule['modules'][$moduleID]['longname'] = $moduleID;

        $restriction = trim((string) $classnode->classlevel);
        if (empty($restriction))
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_CL_RESTRICTION_MISSING', $moduleID);
            return;
        }
        $this->_newSchedule['modules'][$moduleID]['restriction'] = $restriction;

        $degreeID = str_replace('DP_', '', trim((string) $classnode->class_department[0]['id']));
        if (empty($degreeID))
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_CL_DEGREE_MISSING', $moduleID);
            return;
        }
        elseif (empty($this->_newSchedule['degrees'][$degreeID]))
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_CL_DEGREE_LACKING', $moduleID, $degreeID);
            return;
        }
        $this->_newSchedule['modules'][$moduleID]['degree'] = $degreeID;

        $descriptionID = str_replace('DS_', '',trim((string) $classnode->class_description[0]['id']));
        if (empty($descriptionID))
        {
            $this->_scheduleWarnings[] = JText::sprintf('COM_THM_ORGANIZER_CL_DESC_MISSING', $moduleID);
            $descriptionID = '';
        }
        $this->_newSchedule['modules'][$moduleID]['description'] = $descriptionID;
    }

    /**
     * checks whether lesson nodes have the expected structure and required
     * information
     *
     * @param   SimpleXMLNode  &$lessonnode  the lesson node to be validated
     * 
     * @return void
     */
    protected function validateLesson(&$lessonnode)
    {
        $gpuntisID = trim((string) $lessonnode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_LS_ID_MISSING"), $this->_scheduleErrors))
            {
                $this->_scheduleErrors[] = JText::_("COM_THM_ORGANIZER_LS_ID_MISSING");
            }
            return;
        }
        $lessonID = str_replace('LS_', '', $gpuntisID);
        $lessonID = substr($lessonID, 0, strlen($lessonID) - 2);
        if (!isset($this->_newSchedule['lessons'][$lessonID]))
        {
            $this->_newSchedule['lessons'][$lessonID] = array();
        }
        $this->_newSchedule['lessons'][$lessonID]['gpuntisID'] = $gpuntisID;

        $subjectID = str_replace('SU_', '', trim((string) $lessonnode->lesson_subject[0]['id']));
        if (empty($subjectID) AND !isset($this->_newSchedule['lessons'][$lessonID]['subjects']))
        {
            $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_LS_SU_MISSING", $lessonID);
            return;
        }
        elseif (!isset($this->_newSchedule['lessons'][$lessonID]['subjects'])
                AND empty($this->_newSchedule['subjects'][$subjectID]))
        {
            $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_LS_SU_LACKING", $lessondID, $subjectID);
            return;
        }
        if (!isset($this->_newSchedule['lessons'][$lessonID]['subjects']))
        {
            $this->_newSchedule['lessons'][$lessonID]['subjects'] = array();
        }
        if (!empty($subjectID)
         AND !key_exists($subjectID, $this->_newSchedule['lessons'][$lessonID]['subjects']))
        {
            $this->_newSchedule['lessons'][$lessonID]['subjects'][$subjectID] = $this->_newSchedule['subjects'][$subjectID]['longname'];
        }
        $lessonName = (count($this->_newSchedule['lessons'][$lessonID]['subjects']) > 1)?
            implode(' / ', $this->_newSchedule['lessons'][$lessonID]['subjects']) : reset($this->_newSchedule['lessons'][$lessonID]['subjects']);

        /*$descriptionID = str_replace('DS_', '', trim((string) $lessonnode->lesson_description[0]['id']));
        if (empty($descriptionID))
        {
            $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_LS_DESC_MISSING", $lessonName, $lessonID);
            return;
        }
        elseif (empty($this->_newSchedule['descriptions'][$descriptionID]))
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_LS_DESC_LACKING', $lessonName, $lessondID, $subjectID);
            return;
        }
        if (!isset($this->_newSchedule['lessons'][$lessonID]['description']))
        {
            $this->_newSchedule['lessons'][$lessonID]['description'] = $descriptionID;
        }
        $lessonName = " - $descriptionID";
        $this->_newSchedule['lessons'][$lessonID]['name'] = $lessonName;*/

        $teacherID = str_replace('TR_', '', trim((string) $lessonnode->lesson_teacher[0]['id']));
        if (empty($teacherID))
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_LS_TR_MISSING', $lessonName, $lessonID);
            return;
        }
        elseif (empty($this->_newSchedule['teachers'][$teacherID]))
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_LS_TR_LACKING', $lessonName, $lessonID, $teacherID);
            return;
        }
        if (!isset($this->_newSchedule['lessons'][$lessonID]['teachers']))
        {
            $this->_newSchedule['lessons'][$lessonID]['teachers'] = array();
        }
        if (!key_exists($teacherID, $this->_newSchedule['lessons'][$lessonID]['teachers']))
        {
            $this->_newSchedule['lessons'][$lessonID]['teachers'][$teacherID] = $this->_newSchedule['teachers'][$teacherID]['surname'];
        }

        $moduleIDs = (string) $lessonnode->lesson_classes[0]['id'];
        if (empty($moduleIDs) AND !isset($this->_newSchedule['lessons'][$lessonID]['modules']))
        {
            $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_LS_CL_MISSING", $lessonName, $lessonID);
        }
        elseif (!empty($moduleIDs))
        {
            $moduleIDs = explode(" ", $moduleIDs);
            foreach ($moduleIDs as $moduleID)
            {
                $moduleID = str_replace('CL_', '', $moduleID);
                if (!key_exists($moduleID, $this->_newSchedule['modules']))
                {
                    $this->_scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_LS_CL_LACKING", $lessonName, $lessonID, $moduleID);
                    return;
                }
                $this->_newSchedule['lessons'][$lessonID]['modules'][$moduleID] = $this->_newSchedule['modules'][$moduleID]['longname'];
            }
        }

        $lessonStartDate = trim((string) $lessonnode->effectivebegindate);
        if (empty($lessonStartDate))
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_LS_SD_MISSING', $lessonName, $lessonID);
            return;
        }
        $lessonStartDate = substr($lessonStartDate, 0, 4) . '-' . substr($lessonStartDate, 4, 2) . '-' . substr($lessonStartDate, 6, 2);
        $startDateExists = array_key_exists($lessonStartDate, $this->_newSchedule['calendar']);
        if (!$startDateExists)
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_LS_SD_OOB', $lessonName, $lessonID);
            return;
        }

        $lessonEndDate = trim((string) $lessonnode->effectiveenddate);
        if (empty($lessonEndDate))
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_LS_ED_MISSING', $lessonName, $lessonID);
            return;
        }
        $lessonEndDate = substr($lessonEndDate, 0, 4) . '-' . substr($lessonEndDate, 4, 2) . '-' . substr($lessonEndDate, 6, 2);

        // Checks if startdate is before enddate
        $startDT = strtotime($lessonStartDate);
        $endDT = strtotime($lessonEndDate);
        if ($endDT <= $startDT )
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_LS_SDED_INCONSISTANT', $lessonName, $lessonID);
            return;
        }

        // 86400 is the number of seconds in a day 24 * 60 * 60
        // Calculate the days between schoolyear start and lesson start
        $offset = floor(($startDT - strtotime($this->_newSchedule['startdate'])) / 86400);
        $occurences = trim((string) $lessonnode->occurence);

        // Calculate the days between lesson start and end datest
        $length = floor(($endDT - $startDT) / 86400);
        $occurences = trim((string) $lessonnode->occurence);
        if (empty($occurences))
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_LS_OCC_MISSING', $lessonName, $lessonID);
            return;
        }
        elseif (strlen($occurences) != $this->_newSchedule['calendar']['sylength'])
        {
            $this->_scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_LS_OCC_LEN_BAD', $lessonName, $lessonID);
            return;
        }
        $occurences = substr($occurences, $offset, $length);
        $occurences = str_split($occurences);

        $comment = trim((string) $lessonnode->text);
        $this->_newSchedule['lessons'][$lessonID]['comment'] = empty($comment)? '' : $comment;

        $periodsleaf = trim($lessonnode->periods);
        if (empty($periodsleaf))
        {
            $this->_scheduleWarnings[] = JText::sprintf("COM_THM_ORGANIZER_LS_TP_MISSING", $lessonName, $lessonID);
        }
        $times = $lessonnode->times;
        $timescount = count($times->children());
        if (isset($periodsleaf) and $periodsleaf != $timescount)
        {
            $this->_scheduleWarnings[] = JText::sprintf('COM_THM_ORGANIZER_LS_TP_INCONSISTANT', $lessonName, $lessonID);
        }

        $currentDT = $startDT;
        foreach ($occurences as $occurence)
        {
            if ($occurence === '1')
            {
                $currentDate = date('Y-m-d', $currentDT);
                if (!isset($this->_newSchedule['calendar'][$currentDate]))
                {
                    continue;
                }
                foreach ($times->children() as $instance)
                {
                    $day = trim((string) $instance->assigned_day);
                    if (empty($day))
                    {
                        $error = JText::sprintf('COM_THM_ORGANIZER_LS_TP_DAY_MISSING', $lessonName, $lessonID);
                        if (!in_array($error, $this->_scheduleErrors))
                        {
                            $this->_scheduleErrors[] = $error;
                        }
                    }
                    if ($day != date('w', $currentDT))
                    {
                        continue;
                    }

                    $period = trim((string) $instance->assigned_period);
                    if (empty($period))
                    {
                        $error = JText::sprintf('COM_THM_ORGANIZER_LS_TP_PERIOD_MISSING', $lessonName, $lessonID);
                        if (!in_array($error, $this->_scheduleErrors))
                        {
                            $this->_scheduleErrors[] = $error;
                        }
                    }
                    if (!isset($this->_newSchedule['calendar'][$currentDate][$period]))
                    {
                        $error = JText::sprintf('COM_THM_ORGANIZER_LS_TP_LACKING', $lessonName, $lessonID, date('l', $currentDT), $period);
                        if (!in_array($error, $this->_scheduleErrors))
                        {
                            $this->_scheduleErrors[] = $error;
                        }
                    }

                    $roomID = str_replace('RM_', '', trim((string) $instance->assigned_room[0]['id']));
                    if (empty($roomID) AND !isset($this->_newSchedule['calendar'][$currentDate][$period][$lessonID]))
                    {
                        $error = JText::sprintf('COM_THM_ORGANIZER_LS_TP_ROOM_MISSING', $lessonName, $lessonID, date('l', $currentDT), $period);
                        if (!in_array($error, $this->_scheduleErrors))
                        {
                            $this->_scheduleErrors[] = $error;
                        }
                    }
                    elseif (!empty($roomID) AND !key_exists($roomID, $this->_newSchedule['rooms']))
                    {
                        $error = JText::sprintf('COM_THM_ORGANIZER_LS_TP_ROOM_LACKING', $lessonName, $lessonID,date('l', $currentDT), $period, $roomID);
                        if (!in_array($error, $this->_scheduleErrors))
                        {
                            $this->_scheduleErrors[] = $error;
                        }
                    }
                    else
                    {
                        if (!isset($this->_newSchedule['calendar'][$currentDate][$period][$lessonID]))
                        {
                            $this->_newSchedule['calendar'][$currentDate][$period][$lessonID] = array();
                        }
                        if (!empty($roomID) AND !in_array($roomID, $this->_newSchedule['calendar'][$currentDate][$period][$lessonID]))
                        {
                            $this->_newSchedule['calendar'][$currentDate][$period][$lessonID][] = $roomID;
                        }
                    }
                }
            }
            $currentDT = strtotime('+1 day', $currentDT);
        }
    }

    /**
     * Creates an array with dates as indexes for the days of the given planning period
     * 
     * @param   string  $syStartDate  the date upon which the school year begins
     * @param   string  $syEndDate    the date upon which the school year ends
     * 
     * @return void
     */
    private function initializeCalendar($syStartDate, $syEndDate)
    {
       $calendar = array();
       $startDT = strtotime($this->_newSchedule['startdate']);
       $endDT = strtotime($this->_newSchedule['enddate']);

       // Calculate the schoolyear length
       $syLength = floor(($syEndDate - $syStartDate) / 86400) + 1;
       $calendar['sylength'] = $syLength;

       // 86400 is the number of seconds in a day 24 * 60 * 60
       // Calculate the length off the planning period
       $termLength = floor(($endDT - $startDT) / 86400);
       $calendar['termlength'] = $termLength;

       for ($currentDT = $startDT; $currentDT <= $endDT; )
       {
           // Create an index for the date
           $currentDate = date('Y-m-d', $currentDT);
           $calendar[$currentDate] = array();

           // Add period indices
           $dow = date('w', $currentDT);
           foreach ($this->_newSchedule['periods'] as $period)
           {
               if ($period['day'] == $dow)
               {
                   $calendar[$currentDate][$period['period']] = array();
               }
           }

           // Raise the iterator
           $currentDT = strtotime('+1 day', $currentDT);
       }
       $this->_newSchedule['calendar'] = $calendar;
    }

    /**
     * Sorts room descriptions out of the descriptions
     * 
     * @return void
     */
    private function sortRoomTypes()
    {
        foreach ($this->_newSchedule['rooms'] as $room)
        {
            if (isset($this->_newSchedule['descriptions'][$room['description']])
             AND !isset($this->_newSchedule['roomtypes'][$room['description']]))
            {
                $this->_newSchedule['roomtypes'][$room['description']] = $this->_newSchedule['descriptions'][$room['description']];
                unset($this->_newSchedule['descriptions'][$room['description']]);
            }
        }
    }

    /**
     * Sorts teacher and subject fields out of the descriptions
     * 
     * @return void
     */
    private function sortFields()
    {
        foreach ($this->_newSchedule['teachers'] as $teacher)
        {
            if (isset($teacher['description'])
             AND isset($this->_newSchedule['descriptions'][$teacher['description']])
             AND !isset($this->_newSchedule['fields'][$teacher['description']]))
            {
                $this->_newSchedule['fields'][$teacher['description']] = $this->_newSchedule['descriptions'][$teacher['description']];
            }
        }
        foreach ($this->_newSchedule['subjects'] as $subject)
        {
            if (isset($subject['description'])
             AND isset($this->_newSchedule['descriptions'][$subject['description']])
             AND !isset($this->_newSchedule['fields'][$subject['description']]))
            {
                $this->_newSchedule['fields'][$subject['description']] = $this->_newSchedule['descriptions'][$subject['description']];
            }
        }
        foreach ($this->_newSchedule['fields'] as $key => $field)
        {
            unset($this->_newSchedule['descriptions'][$key]);
        }
    }

    /**
     * Sorts lesson types out of the descriptions
     * 
     * @return void
     */
    private function sortLessonTypes()
    {
        foreach ($this->_newSchedule['lessons'] as $lesson)
        {
            if (isset($lesson['description'])
             AND isset($this->_newSchedule['descriptions'][$lesson['description']])
             AND !isset($this->_newSchedule['lessontypes'][$lesson['description']]))
            {
                $this->_newSchedule['lessontypes'][$lesson['description']] = $this->_newSchedule['descriptions'][$lesson['description']];
                unset($this->_newSchedule['descriptions'][$lesson['description']]);
            }
        }
    }

    /**
     * Creates a status report based upon object error and warning messages
     * 
     * @return array ['errors'] critical inconsistencies
     *               ['warnings'] minor inconsistencies
     */
    private function makeStatusReport()
    {
        $status = array();
        if (count($this->_scheduleErrors))
        {
            $status['errors'] = "<br />" . implode("<br />", $this->_scheduleErrors);
        }
        if (count($this->_scheduleWarnings))
        {
            $status['warnings'] = "<br />" . implode("<br />", $this->_scheduleWarnings);
        }
        return $status;
    }

    /**
     * Persists teacher field information from the uploaded schedule
     * 
     * @return void 
     */
    private function saveFields()
    {
        foreach ($this->_newSchedule['fields'] as $field)
        {
            $data = array();
            $data['gpuntisID'] = $field['gpuntisID'];
            $row = JTable::getInstance('teacher_fields', 'thm_organizerTable');
            $fieldExists = $row->load($data);
            $data['field'] = $field['name'];
            $row->save($data);
        }
    }

    /**
     * Persists teacher information from the uploaded schedule
     * 
     * @return void
     */
    private function saveTeachers()
    {
        foreach ($this->_newSchedule['teachers'] as $teacher)
        {
            $pullData = array();
            $pullData['gpuntisID'] = $teacher['gpuntisID'];
            $teacherRow = JTable::getInstance('teachers', 'thm_organizerTable');
            $teacherExists = $teacherRow->load($pullData);
            if (!empty($teacher['description']))
            {
                $pullData['gpuntisID'] = $this->_newSchedule['fields'][$teacher['description']]['gpuntisID'];
                $fieldRow = JTable::getInstance('teacher_fields', 'thm_organizerTable');
                $fieldExists = $fieldRow->load($pullData);
                if ($fieldExists)
                {
                    $teacher['fieldID'] = $fieldRow->id;
                }
            }
            $teacherRow->save($teacher);
        }
    }

    /**
     * Persists room type information from the uploaded schedule
     * 
     * @return void 
     */
    private function saveRoomTypes()
    {
        foreach ($this->_newSchedule['roomtypes'] as $roomType)
        {
            $data = array();
            $data['gpuntisID'] = $roomType['gpuntisID'];
            $row = JTable::getInstance('room_types', 'thm_organizerTable');
            $typeExists = $row->load($data);
            list($data['type'], $data['subtype']) = explode(',', $roomType['name']);
            $row->save($data);
        }
    }

    /**
     * Persists room information from the uploaded schedule
     * 
     * @return void
     */
    private function saveRooms()
    {
        foreach ($this->_newSchedule['rooms'] as $room)
        {
            $pullData = array();
            $pullData['gpuntisID'] = $room['gpuntisID'];
            $roomRow = JTable::getInstance('rooms', 'thm_organizerTable');
            $roomExists = $roomRow->load($pullData);
            if (!empty($room['description']))
            {
                $pullData['gpuntisID'] = $this->_newSchedule['roomtypes'][$room['description']]['gpuntisID'];
                $typeRow = JTable::getInstance('room_types', 'thm_organizerTable');
                $typeExists = $typeRow->load($pullData);
                if ($typeExists)
                {
                    $room['typeID'] = $typeRow->id;
                }
            }
            $roomRow->save($room);
        }
    }

    /**
     * Creates the delta to the previously active schedule
     * 
     * @return void 
     */
    private function createDelta()
    {
        return;
    }

    /**
     * Persists the schedule to be uploaded
     * 
     * @return void 
     */
    private function saveSchedule()
    {
        $data = array();
        $data['departmentname'] = $this->_newSchedule['departmentname'];
        $data['semestername'] = $this->_newSchedule['semestername'];
        $data['creationdate'] = $this->_newSchedule['creationdate'];
        $formdata = JRequest::getVar('jform', null, null, null, 4);
        $data['description'] = JFactory::getDbo()->escape($formdata['description']);
        $data['schedule'] = json_encode($this->_newSchedule);
        $data['startdate'] = $this->_newSchedule['startdate'];
        $data['enddate'] = $this->_newSchedule['enddate'];
        $data['active'] = 1;

        $table = JTable::getInstance('schedules', 'thm_organizerTable');
        $table->save($data);
        return $table->id;
    }

    /**
     * Saves the comment for an uploaded schedule
     * 
     * @return boolean true on success otherwise false 
     */
    public function saveComment()
    {
        $data = JRequest::getVar('jform', null, null, null, 4);
        $data['description'] = JFactory::getDbo()->escape($data['description']);
        
        $table = JTable::getInstance('schedules', 'thm_organizerTable');
        return $table->save($data);
    }
}
