<?php
/**
 * @category    Joomla component
 * @package     THM_Organizer
 * @subpackage  com_thm_organizer.admin
 * @name        data abstraction and business logic class for xml schedules
 * @author      James Antrim, <james.antrim@mni.thm.de>
 * @copyright   2012 TH Mittelhessen
 * @license     GNU GPL v.2
 * @link        www.mni.thm.de
 */
defined('_JEXEC') or die;

jimport('joomla.application.component.model');
require_once 'lesson.php';
require_once 'teacher.php';

define('ERROR', 0);
define('MERGE', 1);
define('TOO_FEW', 2);
define('CHECK_DEPARTMENTS', 3);
define('CHECK_DATES', 4);
define('NOT_ACTIVE', 5);

/**
 * Class enapsulating data abstraction and business logic for xml schedules
 * generated by Untis software.
 *
 * @category    Joomla.Component.Admin
 * @package     thm_organizer
 * @subpackage  com_thm_organizer.admin
 */
class THM_OrganizerModelSchedule extends JModel
{
    /**
     * Array to hold error strings relating to critical data inconsistencies
     *
     * @var array
     */
    public $scheduleErrors = null;

    /**
     * Array to hold warning strings relating to minor data inconsistencies
     *
     * @var array
     */
    public $scheduleWarnings = null;

    /**
     * Object containing information from the actual schedule
     *
     * @var object
     */
    public $schedule = null;

    /**
     * Object conteining information from a reference schedule
     *
     * @var object
     */
    public $refSchedule = null;

    /**
     * Model for lesson functions
     * 
     * @var object 
     */
    private $_lessonModel = null;

    /**
     * Model for teacher functions
     * 
     * @var object 
     */
    private $_teacherModel = null;

    /**
     * saves a schedule in the database for later use
     *
     * @return   array  $statusReport  ['scheduleID']  true on save, false on db error
     *                                 ['errors']      critical data inconsistencies
     *                                 ['warnings']    minor data inconsistencies
     */
    public function upload()
    {
        $this->validate();
        $statusReport = $this->makeStatusReport();

        if (!empty($this->scheduleErrors))
        {
            return $statusReport;
        }

        $dbo = JFactory::getDbo();
        $dbo->transactionStart();
        $this->saveFields();
        $this->saveTeachers();
        $this->saveRoomTypes();
        $this->saveRooms();
        $this->setReference();
        $statusReport['scheduleID'] = $this->saveSchedule();
        if ($dbo->getErrorMsg())
        {
            $dbo->transactionRollback();
        }
        else
        {
            $dbo->transactionCommit();
        }

        return $statusReport;
    }

    /**
     * Checks a given schedule in gp-untis xml format for data completeness and
     * consistency and gives it basic structure
     *
     * @return $status array of strings listing inconsistancies empty if none
     *          were found
     */
    public function validate()
    {
        $xmlSchedule = simplexml_load_file($_FILES['file']['tmp_name']);
        $this->schedule         = new stdClass;
        $this->scheduleErrors   = array();
        $this->scheduleWarnings = array();

        $formdata = JRequest::getVar('jform', null, null, null, 4);
        $rooms_required = isset($formdata['rooms_assignment_required']);
        $this->_lessonModel = new THM_OrganizerModelLesson($this, $rooms_required);
        $this->_teacherModel = JModel::getInstance('teacher', 'THM_OrganizerModel');

        // General node
        // Creation Date & Time
        $creationDate = trim((string) $xmlSchedule[0]['date']);
        if (empty($creationDate))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_CREATION_DATE_MISSING");
        }
        else
        {
            $this->schedule->creationdate = date('Y-m-d', strtotime($creationDate));
        }
        $creationTime = trim((string) $xmlSchedule[0]['time']);
        if (empty($creationTime))
        {
            $this->scheduleWarnings[] = JText::_("COM_THM_ORGANIZER_SCH_CREATION_TIME_MISSING");
        }
        else
        {
            $this->schedule->creationtime = substr($creationTime, 0, 4);
        }

        // Schoolyear dates
        $syStartDate = strtotime(trim((string) $xmlSchedule->general->schoolyearbegindate));
        if (empty($syStartDate))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_START_DATE_MISSING");
        }
        else
        {
            $this->schedule->startdate = date('Y-m-d', $syStartDate);
        }
        $syEndDate = strtotime(trim((string) $xmlSchedule->general->schoolyearenddate));
        if (empty($syEndDate))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_END_DATE_MISSING");
        }
        else
        {
            $this->schedule->enddate = date('Y-m-d', $syEndDate);
        }

        // Organizational Data
        $departmentname = trim((string) $xmlSchedule->general->header1);
        if (empty($departmentname))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_ORGANIZATION_MISSING");
        }
        elseif (preg_match('/[\#\;]/', $departmentname))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_ORGANIZATION_INVALID");
        }
        else
        {
            $this->schedule->departmentname = $departmentname;
        }
        $semestername = trim((string) $xmlSchedule->general->footer);
        if (empty($semestername))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_SCHOOLYEARNAME_MISSING");
        }
        elseif (preg_match('/[\#\;]/', $departmentname))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_SCHOOLYEARNAME_INVALID");
        }
        else
        {
            $this->schedule->semestername = $semestername;
        }

        // Term Start & Enddates
        $startDate = trim((string) $xmlSchedule->general->termbegindate);
        if (empty($startDate))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_START_DATE_MISSING");
        }
        $endDate = trim((string) $xmlSchedule->general->termenddate);
        if (empty($endDate))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SCH_END_DATE_MISSING");
        }

        // Checks if term and schoolyear dates are consistent
        $termStartDT = strtotime($startDate);
        $termEndDT = strtotime($endDate);
        if ($termStartDT < $syStartDate OR $termEndDT > $syEndDate OR $termStartDT >= $termEndDT)
        {
            $this->scheduleErrors[] = JText::sprintf(
                                                      'COM_THM_ORGANIZER_SCH_DATES_INCONSISTANT',
                                                      date('d.m.Y', $syStartDate),
                                                      date('d.m.Y', $syEndDate),
                                                      date('d.m.Y', $termStartDT),
                                                      date('d.m.Y', $termEndDT)
                                                     );
        }

        $this->schedule->periods = new stdClass;
        if (empty($xmlSchedule->timeperiods))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_TP_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->timeperiods->children() as $periodnode)
            {
                $this->validatePeriod($periodnode);
            }
        }

        $this->schedule->fields = new stdClass;
        $this->schedule->roomtypes = new stdClass;
        $this->schedule->lessontypes = new stdClass;
        if (empty($xmlSchedule->descriptions))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_DSM_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->descriptions->children() as $descriptionnode)
            {
                $this->validateDescription($descriptionnode);
            }
        }

        // Departments node holds degree names
        $this->schedule->degrees = new stdClass;
        if (empty($xmlSchedule->departments))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_DP_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->departments->children() as $departmentnode)
            {
                $this->validateDegree($departmentnode);
            }
        }

        $this->schedule->rooms = new stdClass;
        if (empty($xmlSchedule->rooms))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_RM_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->rooms->children() as $roomnode)
            {
                $this->validateRoom($roomnode);
            }
        }

        $this->schedule->subjects = new stdClass;
        if (empty($xmlSchedule->subjects))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SU_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->subjects->children() as $subjectnode)
            {
                $this->validateSubject($subjectnode);
            }
        }

        $this->schedule->teachers = new stdClass;
        if (empty($xmlSchedule->teachers))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_TR_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->teachers->children() as $teachernode)
            {
                $this->_teacherModel->validate($this, $teachernode);
            }
        }

        // Classes node holds information about pools
        $this->schedule->pools = new stdClass;
        if (empty($xmlSchedule->classes))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_CL_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->classes->children() as $classnode)
            {
                $this->validateModule($classnode);
            }
        }

        $this->initializeCalendar($syStartDate, $syEndDate);
        $this->schedule->lessons = new stdClass;
        if (empty($xmlSchedule->lessons))
        {
            $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_LS_MISSING");
        }
        else
        {
            foreach ($xmlSchedule->lessons->children() as $lessonnode)
            {
                $this->_lessonModel->validate($lessonnode);
            }
        }

        $status = $this->makeStatusReport();
        return $status;
    }

    /**
     * validates an individual period
     *
     * @param   SimpleXMLNode  &$periodnode  a resource node
     *
     * @return void
     */
    protected function validatePeriod(&$periodnode)
    {
        $gpuntisID = trim((string) $periodnode[0]['id']);
        $periodID = str_replace('TP_', '', $gpuntisID);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_TP_ID_MISSING"), $this->scheduleErrors))
            {
                $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_TP_ID_MISSING");
            }
            return;
        }
        $this->schedule->periods->$periodID = new stdClass;
        $this->schedule->periods->$periodID->gpuntisID = $gpuntisID;

        $day = (int) $periodnode->day;
        if (empty($day))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_TP_DAY_MISSING", $periodID);
            return;
        }
        else
        {
            $this->schedule->periods->$periodID->day = $day;
        }

        $period = (int) $periodnode->period;
        if (empty($period))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_TP_PERIOD_MISSING", $periodID);
            return;
        }
        else
        {
            $this->schedule->periods->$periodID->period = $period;
        }

        $starttime = trim((string) $periodnode->starttime);
        if (empty($starttime))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_TP_STARTTIME_MISSING", $periodID);
        }
        else
        {
            $this->schedule->periods->$periodID->starttime = $starttime;
        }

        $endtime = trim((string) $periodnode->endtime);
        if (empty($endtime))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_TP_ENDTIME_MISSING", $periodID);
        }
        else
        {
            $this->schedule->periods->$periodID->endtime = $endtime;
        }
    }

    /**
     * Checks whether department nodes have the expected structure and required
     * information
     *
     * @param   SimpleXMLNode  &$descriptionnode  the description node to be validated
     *
     * @return void
     */
    private function validateDescription(&$descriptionnode)
    {
        $gpuntisID = trim((string) $descriptionnode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_DSM_ID_MISSING"), $this->scheduleErrors))
            {
                $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_DSM_ID_MISSING");
            }
            return;
        }
        $descriptionID = str_replace('DS_', '', $gpuntisID);

        $longname = trim((string) $descriptionnode->longname);
        if (empty($longname))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_DSM_DESC_MISSING", $descriptionID);
            return;
        }

        $type = trim((string) $descriptionnode->flags);
        if (empty($type))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_DSM_TYPE_MISSING"), $this->scheduleErrors))
            {
                $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_DSM_TYPE_MISSING", $longname, $descriptionID);
            }
            return;
        }

        switch ($type)
        {
            case 'F':
                $this->schedule->fields->$descriptionID = new stdClass;
                $this->schedule->fields->$descriptionID->gpuntisID = $gpuntisID;
                $this->schedule->fields->$descriptionID->name = $longname;
                break;
            case 'R':
                $this->schedule->roomtypes->$descriptionID = new stdClass;
                $this->schedule->roomtypes->$descriptionID->gpuntisID = $gpuntisID;
                $this->schedule->roomtypes->$descriptionID->name = $longname;
                break;
            case 'U':
                $this->schedule->lessontypes->$descriptionID = new stdClass;
                $this->schedule->lessontypes->$descriptionID->gpuntisID = $gpuntisID;
                $this->schedule->lessontypes->$descriptionID->name = $longname;
                break;
        }
    }

    /**
     * Checks whether department nodes have the expected structure and required
     * information
     *
     * @param   SimpleXMLNode  &$departmentnode  the department node to be validated
     *
     * @return void
     */
    protected function validateDegree(&$departmentnode)
    {
        $gpuntisID = trim((string) $departmentnode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_DP_ID_MISSING"), $this->scheduleErrors))
            {
                $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_DP_ID_MISSING");
            }
            return;
        }
        $degreeID = str_replace('DP_', '', $gpuntisID);
        $this->schedule->degrees->$degreeID = new stdClass;
        $this->schedule->degrees->$degreeID->gpuntisID = $gpuntisID;

        $degreeName = (string) $departmentnode->longname;
        if (!isset($degreeName))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_DP_LN_MISSING", $degreeID);
            return;
        }
        $this->schedule->degrees->$degreeID->name = $degreeName;
    }

    /**
     * Checks whether room nodes have the expected structure and required
     * information
     *
     * @param   SimpleXMLNode  &$roomnode  the room node to be validated
     *
     * @return void
     */
    protected function validateRoom(&$roomnode)
    {
        $gpuntisID = isset($roomnode->external_name)?
            trim((string) $roomnode->external_name) : trim((string) $roomnode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_RM_ID_MISSING"), $this->scheduleErrors))
            {
                $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_RM_ID_MISSING");
            }
            return;
        }
        $roomID = str_replace('RM_', '', $gpuntisID);
        $this->schedule->rooms->$roomID = new stdClass;
        $this->schedule->rooms->$roomID->gpuntisID = $gpuntisID;
        $this->schedule->rooms->$roomID->name = $roomID;
        $this->schedule->rooms->$roomID->localUntisID = str_replace('RM_', '', trim((string) $roomnode[0]['id']));

        $longname = trim((string) $roomnode->longname);
        if (empty($longname))
        {
            $this->scheduleErrors[] = JText::sprintf("COM_THM_ORGANIZER_RM_LN_MISSING", $roomID);
            return;
        }
        else
        {
            $this->schedule->rooms->$roomID->longname = $longname;
        }

        $capacity = trim((int) $roomnode->capacity);
        $this->schedule->rooms->$roomID->capacity = (empty($capacity))? '' : $capacity;

        $descriptionID = str_replace('DS_', '', trim((string) $roomnode->room_description[0]['id']));
        if (empty($descriptionID))
        {
            $this->scheduleWarnings[] = JText::sprintf("COM_THM_ORGANIZER_RM_DESC_MISSING", $longname, $roomID);
            $this->schedule->rooms->$roomID->description = '';
        }
        elseif (empty($this->schedule->roomtypes->$descriptionID))
        {
            $this->scheduleWarnings[] = JText::sprintf("COM_THM_ORGANIZER_RM_DESC_MISSING", $longname, $roomID, $descriptionID);
            $this->schedule->rooms->$roomID->description = '';
        }
        else
        {
            $this->schedule->rooms->$roomID->description = $descriptionID;
        }
    }

    /**
     * Checks whether subject nodes have the expected structure and required
     * information
     *
     * @param   SimpleXMLNode  &$subjectnode  the subject node to be validated
     *
     * @return void
     */
    protected function validateSubject(&$subjectnode)
    {
        $gpuntisID = trim((string) $subjectnode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_SU_ID_MISSING"), $this->scheduleErrors))
            {
                $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_SU_ID_MISSING");
            }
            return;
        }
        $department = $this->schedule->departmentname;
        $subjectID = str_replace('SU_', '', $gpuntisID);
        $subjectIndex = $department . "_" . $subjectID;
        $this->schedule->subjects->$subjectIndex = new stdClass;
        $this->schedule->subjects->$subjectIndex->gpuntisID = $gpuntisID;
        $this->schedule->subjects->$subjectIndex->name = $subjectID;

        $longname = trim((string) $subjectnode->longname);
        if (empty($longname))
        {
            $this->scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_SU_LN_MISSING', $subjectID);
            return;
        }
        else
        {
            $this->schedule->subjects->$subjectIndex->longname = $longname;
        }

        $subjectNo = trim((string) $subjectnode->text);
        if (empty($subjectNo))
        {
            $this->scheduleWarnings[] = JText::sprintf('COM_THM_ORGANIZER_SU_MN_MISSING', $subjectID, $longname);
            $this->schedule->subjects->$subjectIndex->subjectNo = '';
        }
        else
        {
            $this->schedule->subjects->$subjectIndex->subjectNo = $subjectNo;
        }

        $descriptionID = str_replace('DS_', '', trim($subjectnode->subject_description[0]['id']));
        if (empty($descriptionID))
        {
            $this->scheduleWarnings[] = JText::sprintf('COM_THM_ORGANIZER_SU_FIELD_MISSING', $longname, $subjectID);
            $this->schedule->subjects->$subjectIndex->description = '';
        }
        elseif (empty($this->schedule->fields->$descriptionID))
        {
            $this->scheduleWarnings[] = JText::sprintf("COM_THM_ORGANIZER_SU_FIELD_LACKING", $longname, $subjectID, $descriptionID);
            $this->schedule->subjects->$subjectIndex->description = '';
            return;
        }
        else
        {
            $this->schedule->subjects->$subjectIndex->description = $descriptionID;
        }
    }

    /**
     * Checks whether class nodes have the expected structure and required
     * information
     *
     * @param   SimpleXMLNode  &$classnode  the class node to be validated
     *
     * @return void
     */
    protected function validateModule(&$classnode)
    {
        $gpuntisID = isset($classnode->external_name)?
            trim((string) $classnode->external_name) : trim((string) $classnode[0]['id']);
        if (empty($gpuntisID))
        {
            if (!in_array(JText::_("COM_THM_ORGANIZER_CL_ID_MISSING"), $this->scheduleErrors))
            {
                $this->scheduleErrors[] = JText::_("COM_THM_ORGANIZER_CL_ID_MISSING");
            }
            return;
        }
        $moduleID = str_replace('CL_', '', $gpuntisID);
        $this->schedule->pools->$moduleID = new stdClass;
        $this->schedule->pools->$moduleID->gpuntisID = $gpuntisID;
        $this->schedule->pools->$moduleID->name = $moduleID;
        $this->schedule->pools->$moduleID->localUntisID = str_replace('CL_', '', trim((string) $classnode[0]['id']));

        $longname = trim((string) $classnode->longname);
        if (empty($longname))
        {
            $this->scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_CL_LN_MISSING', $moduleID);
            return;
        }
        $this->schedule->pools->$moduleID->longname = $moduleID;

        $restriction = trim((string) $classnode->classlevel);
        if (empty($restriction))
        {
            $this->scheduleWarnings[] = JText::sprintf('COM_THM_ORGANIZER_CL_RESTRICTION_MISSING', $moduleID);
            return;
        }
        $this->schedule->pools->$moduleID->restriction = $restriction;

        $degreeID = str_replace('DP_', '', trim((string) $classnode->class_department[0]['id']));
        if (empty($degreeID))
        {
            $this->scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_CL_DEGREE_MISSING', $moduleID);
            return;
        }
        elseif (empty($this->schedule->degrees->$degreeID))
        {
            $this->scheduleErrors[] = JText::sprintf('COM_THM_ORGANIZER_CL_DEGREE_LACKING', $moduleID, $degreeID);
            return;
        }
        $this->schedule->pools->$moduleID->degree = $degreeID;

        $descriptionID = str_replace('DS_', '', trim((string) $classnode->class_description[0]['id']));
        if (empty($descriptionID))
        {
            $this->scheduleWarnings[] = JText::sprintf('COM_THM_ORGANIZER_CL_FIELD_MISSING', $moduleID);
            $this->schedule->pools->$moduleID->description = '';
        }
        elseif (empty($this->schedule->fields->$descriptionID))
        {
            $this->scheduleWarnings[] = JText::sprintf('COM_THM_ORGANIZER_CL_FIELD_LACKING', $moduleID, $descriptionID);
            $this->schedule->pools->$moduleID->description = '';
        }
        else
        {
            $this->schedule->pools->$moduleID->description = $descriptionID;
        }
    }

    /**
     * Creates an array with dates as indexes for the days of the given planning period
     *
     * @param   int  $syStartDate  the datetime upon which the school year begins
     * @param   int  $syEndDate    the datetime upon which the school year ends
     *
     * @return void
     */
    private function initializeCalendar($syStartDate, $syEndDate)
    {
        $calendar = new stdClass;

        // Calculate the schoolyear length
        $syLength = floor(($syEndDate - $syStartDate) / 86400) + 1;
        $calendar->sylength = $syLength;

        $currentDT = $syStartDate;
        for ($currentDT; $currentDT <= $syEndDate; $currentDT = strtotime('+1 day', $currentDT))
        {
            // Create an index for the date
            $currentDate = date('Y-m-d', $currentDT);
            $calendar->$currentDate = new stdClass;

            // Add period indices
            $dow = date('w', $currentDT);
            foreach ($this->schedule->periods as $period)
            {
                if ($period->day == $dow)
                {
                    $calendar->$currentDate->{$period->period} = new stdClass;
                }
            }
        }
        $this->schedule->calendar = $calendar;
    }

    /**
     * Creates a status report based upon object error and warning messages
     *
     * @return array ['errors'] critical inconsistencies
     *               ['warnings'] minor inconsistencies
     */
    private function makeStatusReport()
    {
        $statusReport = array();
        if (count($this->scheduleErrors))
        {
            $statusReport['errors'] = "<br />" . implode("<br />", $this->scheduleErrors);
        }
        if (count($this->scheduleWarnings))
        {
            $statusReport['warnings'] = "<br />" . implode("<br />", $this->scheduleWarnings);
        }
        return $statusReport;
    }

    /**
     * Persists teacher field information from the uploaded schedule
     *
     * @return void
     */
    private function saveFields()
    {
        foreach ($this->schedule->fields as $field)
        {
            $data = array();
            $data['gpuntisID'] = $field->gpuntisID;
            $row = JTable::getInstance('Fields', 'thm_organizerTable');
            $row->load($data);
            $data['field'] = $field->name;
            $row->save($data);
        }
    }

    /**
     * Persists teacher information from the uploaded schedule
     *
     * @return void
     */
    private function saveTeachers()
    {
        foreach ($this->schedule->teachers as $teacher)
        {
            $pullData = array();
            $pullData['gpuntisID'] = $teacher->gpuntisID;
            $teacherRow = JTable::getInstance('teachers', 'thm_organizerTable');
            $teacherRow->load($pullData);
            if (!empty($teacher->description))
            {
                $pullData['gpuntisID'] = $this->schedule->fields->{$teacher->description}->gpuntisID;
                $fieldRow = JTable::getInstance('Fields', 'thm_organizerTable');
                $fieldExists = $fieldRow->load($pullData);
                if ($fieldExists)
                {
                    $teacher->fieldID = $fieldRow->id;
                }
            }
            $teacherRow->save($teacher);
        }
    }

    /**
     * Persists room type information from the uploaded schedule
     *
     * @return void
     */
    private function saveRoomTypes()
    {
        foreach ($this->schedule->roomtypes as $roomType)
        {
            $data = array();
            $data['gpuntisID'] = $roomType->gpuntisID;
            $roomTypeRow = JTable::getInstance('room_types', 'thm_organizerTable');
            $roomTypeRow->load($data);
            $details = explode(',', $roomType->name);
            if (isset($details[1]))
            {
                $data['type'] = $details[0];
                $data['subtype'] = $details[1];
            }
            else
            {
                $data['type'] = $details[0];
            }
            $roomTypeRow->save($data);
        }
    }

    /**
     * Persists room information from the uploaded schedule
     *
     * @return void
     */
    private function saveRooms()
    {
        foreach ($this->schedule->rooms as $room)
        {
            $pullData = array();
            $pullData['gpuntisID'] = $room->gpuntisID;
            $roomRow = JTable::getInstance('rooms', 'thm_organizerTable');
            $roomRow->load($pullData);
            if (!empty($room->description))
            {
                $pullData['gpuntisID'] = $this->schedule->roomtypes->{$room->description}->gpuntisID;
                $typeRow = JTable::getInstance('room_types', 'thm_organizerTable');
                $typeExists = $typeRow->load($pullData);
                if ($typeExists)
                {
                    $room->typeID = $typeRow->id;
                }
            }
            $roomRow->save($room);
        }
    }

    /**
     * Creates the delta to the chosen reference schedule
     *
     * @return boolean true on successful delta creation, otherwise false
     */
    public function setReference()
    {
        $reference = JTable::getInstance('schedules', 'thm_organizerTable');
        $referenceIDs = JRequest::getVar('cid', array(), 'post', 'array');
        if (!empty($referenceIDs))
        {
            $referenceID = $referenceIDs[0];
            $referenceExists = $reference->load($referenceID);
        }
        elseif (!empty($this->schedule))
        {
            $pullData = array(
                'departmentname' => $this->schedule->departmentname,
                'semestername' => $this->schedule->semestername,
                'startdate' => $this->schedule->startdate,
                'enddate' => $this->schedule->enddate,
                'active' => 1
            );
            $reference->bind($pullData);
            $referenceExists = $reference->load($pullData);
        }

        // The schedule to be referenced could not be found
        if (!$referenceExists and isset($referenceID))
        {
            return false;
        }
        // There was no reference schedule available
        elseif (!$referenceExists)
        {
            return true;
        }
        else
        {
            $this->refSchedule = json_decode($reference->schedule);
        }

        if (isset($referenceID))
        {
            $pullData = array(
                'departmentname' => $reference->departmentname,
                'semestername' => $reference->semestername,
                'startdate' => $reference->startdate,
                'enddate' => $reference->enddate,
                'active' => 1
            );
            $actual = JTable::getInstance('schedules', 'thm_organizerTable');
            $actualExists = $actual->load($pullData);
            if (!$actualExists)
            {
                return false;
            }
            $this->schedule = json_decode($actual->schedule);
        }

        $this->sanitizeSchedule($this->schedule);
        $this->sanitizeSchedule($this->refSchedule);
        if (isset($referenceID))
        {
            $dbo = JFactory::getDbo();
            $dbo->transactionStart();
        }
        $referenceDate = $reference->creationdate;
        $reference->schedule = json_encode($this->refSchedule);
        $reference->active = 0;
        $success = $reference->store();
        if (isset($referenceID) and !$success)
        {
            $dbo->transactionRollback();
            return false;
        }
        unset($reference);

        $this->setLessonReference($this->schedule->lessons, $this->refSchedule->lessons);
        $this->setCalendarReference($this->schedule->calendar, $this->refSchedule->calendar);
        $this->schedule->referencedate = $referenceDate;

        if (isset($referenceID))
        {
            $actual->schedule = json_encode($this->schedule);
            $success = $actual->store();
            if (!$success)
            {
                $dbo->transactionRollback();
                return false;
            }
            else
            {
                $dbo->transactionCommit();
            }
        }

        return true;
    }

    /**
     * Activates the selected schedule
     *
     * @return  true on success, otherwise false
     */
    public function activate()
    {
        $scheduleRow = JTable::getInstance('schedules', 'thm_organizerTable');
        $scheduleIDs = JRequest::getVar('cid', array(), 'post', 'array');
        if (!empty($scheduleIDs))
        {
            $scheduleExists = $scheduleRow->load($scheduleIDs[0]);
        }
        if (!$scheduleExists)
        {
            return false;
        }

        $schedule = json_decode($scheduleRow->schedule);
        $this->sanitizeSchedule($schedule);
        $scheduleRow->schedule = json_encode($schedule);
        $scheduleRow->active = 1;

        $dbo = JFactory::getDbo();
        $dbo->transactionStart();

        $zeroQuery = $dbo->getQuery(true);
        $zeroQuery->update('#__thm_organizerschedules');
        $zeroQuery->set("active = '0'");
        $zeroQuery->where("departmentname = '$scheduleRow->departmentname'");
        $zeroQuery->where("semestername = '$scheduleRow->semestername'");
        $dbo->setQuery((string) $zeroQuery);
        try
        {
            $dbo->Query();
        }
        catch (Exception $exception)
        {
            JFactory::getApplication()->enqueueMessage($exception->getMessage(), 'error');
            $dbo->transactionRollback();
            return false;
        }
        $success = $scheduleRow->store();
        if ($success)
        {
            $dbo->transactionCommit();
            return true;
        }
        else
        {
            $dbo->transactionRollback();
            return false;
        }
    }

    /**
     * removes delta information from a schedule
     *
     * @param   array  &$schedule  the currently active schedule
     *
     * @return void
     */
    public function sanitizeSchedule(&$schedule)
    {
        $this->sanitizeLessons($schedule->lessons);
        $this->sanitizeCalendar($schedule->calendar);
        if (isset($schedule->referencedate))
        {
            unset($schedule->referencedate);
        }
    }

    /**
     * removes delta information from a schedule
     *
     * @param   array  &$lessons  the currently active schedule lessons
     *
     * @return void
     */
    private function sanitizeLessons(&$lessons)
    {
        foreach ($lessons as $lessonKey => $lesson)
        {
            if (isset($lesson->delta))
            {
                switch ($lesson->delta)
                {
                    case 'new':
                        unset($lessons->$lessonKey->delta);
                    continue;
                    case 'removed':
                        unset($lessons->$lessonKey);
                    continue;
                    case 'changed':
                        $this->sanitizeLessonProperty($lessons->$lessonKey->subjects);
                        $this->sanitizeLessonProperty($lessons->$lessonKey->teachers);
                        $this->sanitizeLessonProperty($lessons->$lessonKey->pools);
                        unset($lessons->$lessonKey->delta);
                    continue;
                }
            }
        }
    }

    /**
     * sanitizes a given lesson property
     *
     * @param   array  &$property  the array holding information about the property
     *
     * @return void
     */
    private function sanitizeLessonProperty(&$property)
    {
        foreach ($property as $key => $value)
        {
            switch ($value)
            {
                case 'new':
                    $property->$key = '';
                continue;
                case '':
                continue;
                case 'removed':
                    unset($property->$key);
                continue;
            }
        }
    }

    /**
     * sanitizes the calendar array of delta information
     *
     * @param   array  &$calendar  the calendar data to be sanitized
     *
     * @return void
     */
    private function sanitizeCalendar(&$calendar)
    {
        foreach ($calendar as $date => $periods)
        {
            if (is_object($calendar->$date) and count($periods))
            {
                foreach ($periods as $period => $lessons)
                {
                    if (count($lessons))
                    {
                        foreach ($lessons as $lesson => $rooms)
                        {
                            if (isset($calendar->$date->$period->$lesson->delta))
                            {
                                switch ($calendar->$date->$period->$lesson->delta)
                                {
                                    case 'new':
                                        unset($calendar->$date->$period->$lesson->delta);
                                        break;
                                    case 'removed':
                                        unset($calendar->$date->$period->$lesson);
                                        break;
                                    case 'changed':
                                        foreach ($rooms as $roomID => $delta)
                                        {
                                            if ($roomID == 'delta')
                                            {
                                                continue;
                                            }
                                            switch ($delta)
                                            {
                                                case 'new':
                                                    $calendar->$date->$period->$lesson->$roomID = '';
                                                continue;
                                                case '':
                                                continue;
                                                case 'removed':
                                                    unset($calendar->$date->$period->$lesson->$roomID);
                                                continue;
                                            }
                                        }
                                        unset($calendar->$date->$period->$lesson->delta);
                                        break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Examines the lessons of the new and old schedules to determine the delta
     *
     * @param   array  $lessons     the lessons of the new schedule
     * @param   array  $refLessons  the lessons of the old schedule
     *
     * @return void
     */
    private function setLessonReference($lessons, $refLessons)
    {
        // Check for new lesson data
        foreach ($lessons as $lessonID => $lesson)
        {
            // Lesson only exists in the new schedule
            if (!isset($refLessons->$lessonID))
            {
                $lessons->$lessonID->delta = 'new';
                continue;
            }

            // Lesson exists in both schedules -> compare properties
            $subjectChanges = $this->setPropertyReference($lessons->$lessonID->subjects, $refLessons->$lessonID->subjects);
            $teacherChanges = $this->setPropertyReference($lessons->$lessonID->teachers, $refLessons->$lessonID->teachers);
            $moduleChanges = $this->setPropertyReference($lessons->$lessonID->pools, $refLessons->$lessonID->pools);

            // Property indexes are not identical
            if ($subjectChanges or $teacherChanges or $moduleChanges)
            {
                $lessons->$lessonID->delta = 'changed';
            }
        }

        // Check for old lesson data
        foreach ($refLessons as $lessonID => $lesson)
        {
            // Lesson only exists in old schedule
            if (!isset($lessons->$lessonID))
            {
                $lessons->$lessonID = $refLessons->$lessonID;
                $lessons->$lessonID->delta = 'removed';
                continue;
            }
        }
    }

    /**
     * examines a property of both schedules and creates a delta according to
     * property indexes
     *
     * @param   array  &$property     the property of the new lesson to be examined
     * @param   array  &$refProperty  the property of the old lesson to be examined
     *
     * @return boolean $changesExist true if a property index is not in both sets
     */
    private function setPropertyReference(&$property, &$refProperty)
    {
        $changesExist = false;
        foreach ($property as $propertyID => $delta)
        {
            if (!isset($refProperty->$propertyID))
            {
                $property->$propertyID = 'new';
                $changesExist = true;
                continue;
            }
        }
        foreach ($refProperty as $propertyID => $delta)
        {
            if (!isset($property->$propertyID))
            {
                $property->$propertyID = 'removed';
                $changesExist = true;
                continue;
            }
        }
        return $changesExist;
    }

    /**
     * Examines the calendars of the actual and the reference schedules to
     * determine changes
     *
     * @param   object  &$calendar     the calendar of the actual schedule
     * @param   object  &$refCalendar  the calendar of the reference schedule
     *
     * @return void
     */
    private function setCalendarReference(&$calendar, &$refCalendar)
    {
        foreach ($calendar as $date => $periods)
        {
            if (is_object($calendar->$date) and count($periods))
            {
                foreach ($periods as $period => $lessons)
                {
                    if (count($lessons))
                    {
                        foreach ($lessons as $lessonID => $rooms)
                        {
                            if (!isset($refCalendar->$date->$period->$lessonID))
                            {
                                $calendar->$date->$period->$lessonID->delta = 'new';
                                continue;
                            }
                            else
                            {
                                foreach ($rooms as $roomID => $delta)
                                {
                                    if ($roomID == 'delta' or empty($roomID))
                                    {
                                        continue;
                                    }
                                    if (!isset($refCalendar->$date->$period->$lessonID->$roomID))
                                    {
                                        $calendar->$date->$period->$lessonID->$roomID = 'new';
                                        $calendar->$date->$period->$lessonID->delta = 'changed';
                                        continue;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        foreach ($refCalendar as $date => $periods)
        {
            if (is_object($calendar->$date) and count($periods))
            {
                foreach ($periods as $period => $lessons)
                {
                    if (count($lessons))
                    {
                        foreach ($lessons as $lessonID => $rooms)
                        {
                            if (!isset($calendar->$date->$period->$lessonID))
                            {
                                $calendar->$date->$period->$lessonID = new stdClass;
                                foreach ($rooms as $roomID => $delta)
                                {
                                    $calendar->$date->$period->$lessonID->$roomID = '';
                                }
                                $calendar->$date->$period->$lessonID->delta = 'removed';
                                continue;
                            }
                            else
                            {
                                foreach ($rooms as $roomID => $delta)
                                {
                                    if ($roomID == 'delta')
                                    {
                                        continue;
                                    }
                                    if (!isset($calendar->$date->$period->$lessonID->$roomID))
                                    {
                                        $calendar->$date->$period->$lessonID->$roomID = 'removed';
                                        $calendar->$date->$period->$lessonID->delta = 'changed';
                                        continue;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Checks whether the selected schedules pass the merge constraints:
     * 1 Constraints Passed
     * 2 Only one schedule selected
     * 3 Not all schedules differ in department
     * 4 Not all schedule dates are the same
     * 5 Not all schedules are active
     *
     * @return  integer
     */
    public function checkMergeConstraints()
    {
        $scheduleIDs = JRequest::getVar('cid', array(), 'post', 'array');
        if (empty($scheduleIDs) OR count($scheduleIDs) < 2)
        {
            return TOO_FEW;
        }
        $whereIDs = "'" . implode("', '", $scheduleIDs) . "'";

        $dbo = JFactory::getDbo();

        $query = $dbo->getQuery(true);
        $query->select('departmentname, active, startdate, enddate');
        $query->from('#__thm_organizerschedules');
        $query->where("id IN ( $whereIDs )");
        $dbo->setQuery((string) $query);
        $schedules = $dbo->loadAssocList();

        $departments = array();
        $startdate = $schedules[0]['startdate'];
        $enddate = $schedules[0]['enddate'];

        foreach ($schedules as $schedule)
        {
            if ($schedule['active'] == 0)
            {
                return NOT_ACTIVE;
            }
            if ($schedule['startdate'] != $startdate OR $schedule['enddate'] != $enddate)
            {
                return CHECK_DATES;
            }
            if (in_array($schedule['departmentname'], $departments))
            {
                return CHECK_DEPARTMENTS;
            }
            else
            {
                $departments[] = $schedule['departmentname'];
            }
        }
        return MERGE;
    }

    /**
     * Merges the chosen schedules into a new schedule
     *
     * @return  int  a value which stands for different statuses
     */
    public function merge()
    {
        $checkedIDs = JRequest::getVar('schedules', array(), 'post', 'array');
        if (empty($checkedIDs) OR count($checkedIDs) < 2)
        {
            return TOO_FEW;
        }
        $scheduleIDs = "'" . implode("', '", $checkedIDs) . "'";

        $mergedSchedule = array();
        $mergedSchedule['creationdate'] = date('Y-m-d');
        $mergedSchedule['creationtime'] = date('is');
        $mergedSchedule['departmentname'] = JRequest::getString('departmentname');
        $mergedSchedule['semestername'] = JRequest::getString('semestername');

        $dbo = JFactory::getDbo();
        $scheduleQuery = $dbo->getQuery(true);
        $scheduleQuery->select('schedule');
        $scheduleQuery->from('#__thm_organizerschedules');
        $scheduleQuery->where("id IN ( $scheduleIDs )");
        $dbo->setQuery((string) $scheduleQuery);
        $schedules = $dbo->loadResultArray();

        foreach ($schedules as $key => $value)
        {
            $schedules[$key] = json_decode($value);
        }

        $baseSchedule = $schedules[0];
        for ($index = 1; $index < count($schedules); $index++)
        {
            $this->mergeRecursive($baseSchedule, $schedules[$index]);
        }
        $baseSchedule->creationdate = $mergedSchedule['creationdate'];
        $baseSchedule->creationtime = $mergedSchedule['creationtime'];
        $baseSchedule->departmentname = $mergedSchedule['departmentname'];
        $baseSchedule->semestername = $mergedSchedule['semestername'];
        $mergedSchedule['startdate'] = $baseSchedule->startdate;
        $mergedSchedule['enddate'] = $baseSchedule->enddate;
        $mergedSchedule['active'] = 1;
        $mergedSchedule['schedule'] = json_encode($baseSchedule);

        $table = JTable::getInstance('schedules', 'thm_organizerTable');
        $success = $table->save($mergedSchedule);
        if ($success)
        {
            return MERGE;
        }
        else
        {
            return ERROR;
        }
    }

    /**
     * Attempts to recursively merge two schedule objects
     *
     * @param   object  &$thingOne  the first object
     * @param   object  &$thingTwo  the second object
     *
     * @return  void
     */
    private function mergeRecursive(&$thingOne, &$thingTwo)
    {
        foreach ($thingTwo as $property => $value)
        {
            if (!isset($thingOne->$property))
            {
                $thingOne->$property = $value;
            }
            elseif ($thingOne->$property !== $thingTwo->$property)
            {
                if (is_string($thingOne->$property) AND is_string($thingTwo->$property))
                {
                    $thingOne->$property = $thingTwo->$property;
                }
                if (is_object($thingOne->$property) AND is_object($thingTwo->$property) AND $thingTwo->$property != null)
                {
                    $this->mergeRecursive($thingOne->$property, $thingTwo->$property);
                }
            }
        }
    }

    /**
     * Persists the schedule to be uploaded
     *
     * @return void
     */
    private function saveSchedule()
    {
        $data = array();
        $data['departmentname'] = $this->schedule->departmentname;
        $data['semestername'] = $this->schedule->semestername;
        $data['creationdate'] = $this->schedule->creationdate;
        $formdata = JRequest::getVar('jform', null, null, null, 4);
        $data['description'] = JFactory::getDbo()->escape($formdata['description']);
        $data['schedule'] = json_encode($this->schedule);
        $data['startdate'] = $this->schedule->startdate;
        $data['enddate'] = $this->schedule->enddate;
        $data['active'] = 1;

        $row = JTable::getInstance('schedules', 'thm_organizerTable');
        $row->save($data);
        return $row->id;
    }

    /**
     * Saves the comment for an uploaded schedule
     *
     * @return boolean true on success otherwise false
     */
    public function saveComment()
    {
        $data = JRequest::getVar('jform', null, null, null, 4);
        $data['description'] = JFactory::getDbo()->escape($data['description']);
        unset($data->startdate, $data->enddate, $data->creationdate);
        $table = JTable::getInstance('schedules', 'thm_organizerTable');
        return $table->save($data);
    }

    /**
     * Checks if the first selected schedule is active
     *
     * @return boolean true if the schedule is active otherwise false
     */
    public function checkIfActive()
    {
        $scheduleIDs = JRequest::getVar('cid', array(), 'post', 'array');
        if (!empty($scheduleIDs))
        {
            $scheduleID = $scheduleIDs[0];
            $schedule = JTable::getInstance('schedules', 'thm_organizerTable');
            $schedule->load($scheduleID);
            return $schedule->active;
        }
        else
        {
            return false;
        }
    }

    /**
     * Deletes the selected schedules
     *
     * @return boolean true on successful deletion of all selected schedules
     *                 otherwise false
     */
    public function delete()
    {
        $dbo = JFactory::getDbo();
        $dbo->transactionStart();
        $scheduleIDs = JRequest::getVar('cid', array(), 'post', 'array');
        foreach ($scheduleIDs as $scheduleID)
        {
            $success = $this->deleteSingle($scheduleID);
            if (!$success)
            {
                $dbo->transactionRollback();
                return false;
            }
        }
        if ($dbo->getErrorNum())
        {
            $dbo->transactionRollback();
            return false;
        }
        else
        {
            $dbo->transactionCommit();
            return true;
        }
    }

    /**
     * Deletes a single schedule
     *
     * @param   int  $scheduleID  the id of the schedule to be deleted
     *
     * @return boolean true on success otherwise false
     */
    public function deleteSingle($scheduleID)
    {
        $schedule = JTable::getInstance('schedules', 'thm_organizerTable');
        $schedule->load($scheduleID);
        return $schedule->delete();
    }
}
